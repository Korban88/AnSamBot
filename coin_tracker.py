import asyncio
import logging
from crypto_utils import get_price
from datetime import datetime

logger = logging.getLogger(__name__)

class CoinTracker:
    def __init__(self, bot, user_id):
        self.bot = bot
        self.user_id = user_id
        self.tracked = {}

    async def add(self, symbol):
        self.tracked[symbol] = {
            "start_time": datetime.utcnow(),
            "start_price": await get_price(symbol)
        }

    async def clear(self):
        self.tracked = {}

    async def run(self):
        to_remove = []
        for symbol, data in self.tracked.items():
            current_price = await get_price(symbol)
            if not current_price:
                continue

            start_price = data["start_price"]
            percent_change = ((current_price - start_price) / start_price) * 100
            time_passed = (datetime.utcnow() - data["start_time"]).total_seconds() / 3600

            if percent_change >= 5:
                await self.bot.send_message(
                    self.user_id,
                    f"üöÄ *{symbol.upper()} –≤—ã—Ä–æ—Å –Ω–∞ +{percent_change:.2f}%!* –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.",
                    parse_mode="Markdown"
                )
                to_remove.append(symbol)

            elif percent_change >= 3.5:
                await self.bot.send_message(
                    self.user_id,
                    f"üìà *{symbol.upper()} –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏* (+{percent_change:.2f}%)",
                    parse_mode="Markdown"
                )

            elif time_passed >= 12:
                await self.bot.send_message(
                    self.user_id,
                    f"‚è≥ –° –º–æ–º–µ–Ω—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {symbol.upper()} –ø—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤. "
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change:.2f}%",
                    parse_mode="Markdown"
                )
                to_remove.append(symbol)

        for symbol in to_remove:
            self.tracked.pop(symbol, None)
