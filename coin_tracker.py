import asyncio
from datetime import datetime, timedelta

class CoinTracker:
    def __init__(self, bot, user_id):
        self.bot = bot
        self.user_id = user_id
        self.active_trackings = {}

    async def track_coin(self, symbol, start_price):
        if symbol in self.active_trackings:
            return

        self.active_trackings[symbol] = {
            'start_time': datetime.utcnow(),
            'start_price': start_price
        }

        asyncio.create_task(self._monitor(symbol))

    async def stop_all_tracking(self):
        self.active_trackings.clear()

    async def _monitor(self, symbol):
        data = self.active_trackings.get(symbol)
        if not data:
            return

        start_price = data['start_price']
        start_time = data['start_time']

        while True:
            await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

            # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from crypto_utils import get_price

            current_price = get_price(symbol)
            if not current_price:
                continue

            change = ((current_price - start_price) / start_price) * 100

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ +3.5%
            if 3.4 < change < 3.6:
                await self.bot.send_message(
                    self.user_id,
                    f"üìà {symbol} –≤—ã—Ä–æ—Å –Ω–∞ *{change:.2f}%*. –ú–æ–Ω–µ—Ç–∞ –±–ª–∏–∑–∫–∞ –∫ —Ü–µ–ª–∏ +5%!"
                )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ +5%
            if change >= 5:
                await self.bot.send_message(
                    self.user_id,
                    f"üöÄ {symbol} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ —Ä–æ—Å—Ç–∞ *+5%*! –¶–µ–Ω–∞: *{current_price}*"
                )
                self.active_trackings.pop(symbol, None)
                return

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, –µ—Å–ª–∏ +3.5% –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã
            if datetime.utcnow() - start_time >= timedelta(hours=12):
                await self.bot.send_message(
                    self.user_id,
                    f"‚è∞ –ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {symbol}.\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{current_price}*,\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞: *{change:.2f}%*"
                )
                self.active_trackings.pop(symbol, None)
                return
