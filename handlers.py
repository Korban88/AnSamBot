from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from analysis import get_top_signal
from tracking import start_tracking, stop_all_trackings
from config import OWNER_ID

async def start_command_handler(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=reply_markup
    )

async def button_callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        signal = await get_top_signal()

        if signal:
            message = (
                f"–ú–æ–Ω–µ—Ç–∞: *{signal['symbol']}*\n"
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{signal['entry_price']}* $\n"
                f"–¶–µ–ª—å +5%: *{signal['target_price']}* $\n"
                f"–°—Ç–æ–ø-–ª–æ—Å—Å: *{signal['stop_loss']}* $\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{signal['change_24h']}%*\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['probability']}%*"
            )

            button = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
            ])

            await query.message.reply_text(message, reply_markup=button, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    elif query.data == "stop_tracking":
        stop_all_trackings()
        await query.message.reply_text("‚õîÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    elif query.data.startswith("track_"):
        symbol = query.data.replace("track_", "")
        start_tracking(symbol)
        await query.message.reply_text(f"üîî –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–æ–Ω–µ—Ç—É *{symbol}*", parse_mode="Markdown")

# –û–±—ä—è–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ main.py
start_handler = CommandHandler("start", start_command_handler)
button_handler = CallbackQueryHandler(button_callback_handler)
