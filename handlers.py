from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from analysis import analyze_cryptos
from utils import send_signal_message, reset_cache, debug_cache_message
from tracking import CoinTracker
from config import TELEGRAM_BOT_TOKEN, OWNER_ID
import json
import os

# --- /start handler ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à", callback_data="reset_cache")],
        [InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=reply_markup
    )

start_handler = CommandHandler("start", start)
debug_handler = CommandHandler("debug_cache", lambda update, context: debug_cache_message(update.effective_user.id, context))

# --- inline buttons handler ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "get_signal":
        await send_signal_message(user_id, context)
    elif query.data == "reset_cache":
        reset_cache()
        await query.edit_message_text("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω.")
    elif query.data == "stop_tracking":
        CoinTracker.clear_all()
        await query.edit_message_text("‚õî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    elif query.data.startswith("track_"):
        symbol = query.data.split("_", 1)[1]
        CoinTracker.track(user_id, symbol, context)
        await query.edit_message_text(f"üîî –ú–æ–Ω–µ—Ç–∞ {symbol.upper()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")

button_handler = CallbackQueryHandler(button_callback)

# --- reply –∫–Ω–æ–ø–∫–∏ ---
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if "—Å–∏–≥–Ω–∞–ª" in text:
        await send_signal_message(user_id, context)
    elif "—Å—Ç–æ–ø" in text or "–æ—Ç–º–µ–Ω–∞" in text:
        CoinTracker.clear_all()
        await update.message.reply_text("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    elif "—Å–±—Ä–æ—Å" in text:
        reset_cache()
        await update.message.reply_text("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ '—Å–∏–≥–Ω–∞–ª', '—Å—Ç–æ–ø' –∏–ª–∏ '—Å–±—Ä–æ—Å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
