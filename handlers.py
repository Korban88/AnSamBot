from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from utils import (
    send_signal_message,
    reset_cache,
    debug_cache_message,
    debug_analysis_message,
    manual_refresh_signals
)
from tracking import CoinTracker
from crypto_utils import get_current_price
import json
import os
import pytz
from datetime import datetime

MOSCOW_TZ = pytz.timezone("Europe/Moscow")

reply_keyboard = [
    [KeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
    [KeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"), KeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à")],
    [KeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")],
    [KeyboardButton("üì¶ –ö–µ—à —Å–∏–≥–Ω–∞–ª–æ–≤"), KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç")]
]
reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=reply_markup
    )

start_handler = CommandHandler("start", start)


async def analyze_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await manual_refresh_signals(update.effective_user.id, context)

analyze_command_handler = CommandHandler("analyze", analyze_handler)

debug_handler = CommandHandler("debug_cache", lambda update, context: debug_cache_message(update.effective_user.id, context))
debug_analysis_handler = CommandHandler("debug_analysis", lambda update, context: debug_analysis_message(update.effective_user.id, context))


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("track_"):
        symbol = query.data.split("_", 1)[1]
        CoinTracker.track(user_id, symbol, context)
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol.upper()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.\n"
                 f"–í–µ—á–µ—Ä–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –æ –µ—ë –¥–∏–Ω–∞–º–∏–∫–µ."
        )

button_handler = CallbackQueryHandler(button_callback)


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if "–æ–±–Ω–æ–≤–∏—Ç—å" in text:
        await manual_refresh_signals(user_id, context)
    elif "—Å–∏–≥–Ω–∞–ª" in text and "–∫–µ—à" not in text:
        await send_signal_message(user_id, context)
    elif "—Å–±—Ä–æ—Å" in text:
        reset_cache()
        await update.message.reply_text("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω.", reply_markup=reply_markup)
    elif "–∞–Ω–∞–ª–∏–∑" in text:
        await debug_analysis_message(user_id, context)
    elif "–∫–µ—à" in text:
        await debug_cache_message(user_id, context)
    elif "—Å—Ç–æ–ø" in text or "–æ—Ç–º–µ–Ω–∞" in text:
        CoinTracker.clear_all()
        await update.message.reply_text("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à–∏ '—Å–∏–≥–Ω–∞–ª', '–∞–Ω–∞–ª–∏–∑', '–∫–µ—à' –∏–ª–∏ '—Å–±—Ä–æ—Å'.",
            reply_markup=reply_markup
        )


# üîç –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ tracking_data.json
async def show_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    CoinTracker.load_tracking_data()
    data = CoinTracker.tracked.get(str(update.effective_user.id), {})
    if not data:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.")
        return

    report_lines = ["üìÇ –¢–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"]
    for symbol, details in data.items():
        initial = details.get("initial_price")
        coin_id = details.get("coin_id")
        if not initial or initial == "fetch_error":
            current = await get_current_price(coin_id)
            if current:
                details["initial_price"] = current
                CoinTracker.save_tracking_data()
                initial = current

        # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–°–ö
        try:
            utc_time = datetime.fromisoformat(details.get("start_time"))
            local_time = utc_time.astimezone(MOSCOW_TZ).strftime("%d.%m %H:%M")
        except Exception:
            local_time = details.get("start_time")

        report_lines.append(
            f"{symbol.upper()} | –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {initial} | –í—Ä–µ–º—è: {local_time}"
        )

    await update.message.reply_text("\n".join(report_lines))

show_tracking_handler = CommandHandler("show_tracking", show_tracking)
