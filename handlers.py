from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from utils import (
    send_signal_message,
    reset_cache,
    debug_cache_message,
    debug_analysis_message,
    manual_refresh_signals
)
from tracking import CoinTracker

# –ü–∞–Ω–µ–ª—å —Å–Ω–∏–∑—É (ReplyKeyboard)
reply_keyboard = [
    [KeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
    [KeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"), KeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à")],
    [KeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")],
    [KeyboardButton("üì¶ –ö–µ—à —Å–∏–≥–Ω–∞–ª–æ–≤"), KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç")]
]
reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=reply_markup
    )

# ‚úÖ –û–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ main.py –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
start_handler = CommandHandler("start", start)

async def analyze_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await manual_refresh_signals(update.effective_user.id, context)

analyze_command_handler = CommandHandler("analyze", analyze_handler)


# Debug –∫–æ–º–∞–Ω–¥—ã
debug_handler = CommandHandler("debug_cache", lambda update, context: debug_cache_message(update.effective_user.id, context))
debug_analysis_handler = CommandHandler("debug_analysis", lambda update, context: debug_analysis_message(update.effective_user.id, context))


# Inline –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("track_"):
        symbol = query.data.split("_", 1)[1]
        CoinTracker.track(user_id, symbol, context)
        await query.edit_message_text(f"üîî –ú–æ–Ω–µ—Ç–∞ {symbol.upper()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")

button_handler = CallbackQueryHandler(button_callback)


# Reply –∫–Ω–æ–ø–∫–∏
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if "–æ–±–Ω–æ–≤–∏—Ç—å" in text:
        await manual_refresh_signals(user_id, context)
    elif "—Å–∏–≥–Ω–∞–ª" in text and "–∫–µ—à" not in text:
        await send_signal_message(user_id, context)
    elif "—Å–±—Ä–æ—Å" in text:
        reset_cache()
        await update.message.reply_text("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω.", reply_markup=reply_markup)
    elif "–∞–Ω–∞–ª–∏–∑" in text:
        await debug_analysis_message(user_id, context)
    elif "–∫–µ—à" in text:
        await debug_cache_message(user_id, context)
    elif "—Å—Ç–æ–ø" in text or "–æ—Ç–º–µ–Ω–∞" in text:
        CoinTracker.clear_all()
        await update.message.reply_text("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à–∏ '—Å–∏–≥–Ω–∞–ª', '–∞–Ω–∞–ª–∏–∑', '–∫–µ—à' –∏–ª–∏ '—Å–±—Ä–æ—Å'.",
            reply_markup=reply_markup
        )
