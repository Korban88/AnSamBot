from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from analysis import get_top_signal
from tracking import start_tracking, stop_all_trackings
from utils import reset_cache

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
    [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à", callback_data="reset_cache")],
    [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
])

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=keyboard
    )

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        signal = await get_top_signal()
        if signal:
            text = (
                f"üíπ *–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É:*\n\n"
                f"*–ú–æ–Ω–µ—Ç–∞:* `{signal['symbol']}`\n"
                f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {signal['entry_price']}\n"
                f"*–¶–µ–ª—å:* +5% ‚Üí {signal['target_price']}\n"
                f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* {signal['stop_loss']}\n"
                f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* {signal['change_24h']}%\n"
                f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {signal['probability']}%\n"
                f"\n_–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥—ë–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º —Ä—ã–Ω–∫–∞._"
            )
            button = InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
            ])
            await query.message.reply_text(text, reply_markup=button, parse_mode="MarkdownV2")
        else:
            await query.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

    elif query.data == "reset_cache":
        reset_cache()
        await query.message.reply_text("üîÑ –ö–µ—à —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")

    elif query.data == "stop_tracking":
        stop_all_trackings()
        await query.message.reply_text("üö´ –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    elif query.data.startswith("track_"):
        symbol = query.data.replace("track_", "")
        await start_tracking(symbol, context)
        await query.message.reply_text(f"‚è± –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {symbol} –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")
