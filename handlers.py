from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from analysis import get_top_signals

logger = logging.getLogger("handlers")

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        await get_signal_handler(update, context, from_button=True)

async def get_signal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    if from_button:
        message = update.callback_query.message
    else:
        message = update.message

    top_signals = await get_top_signals()

    if not top_signals:
        await message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –ø–æ —Ç–µ–∫—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º.")
        return

    signal = top_signals[0]

    text = (
        f"üí° –°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: {signal['name']}\n\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['entry_price']}\n"
        f"–¶–µ–ª—å +5%: {signal['target_price']}\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']}\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {signal['probability']}%\n"
    )

    await message.reply_text(text)
