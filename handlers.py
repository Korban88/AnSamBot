from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.signals import get_top_signals
from tracking import start_tracking, stop_all_trackings
import os

# –°—Ç–∞—Ä—Ç
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")],
        [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à", callback_data="reset_cache")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup)

# –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª
signal_index = {}

async def get_signal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    top_signals = await get_top_signals()

    index = signal_index.get(user_id, 0)
    signal = top_signals[index % len(top_signals)]
    signal_index[user_id] = index + 1

    text = (
        f"*–ú–æ–Ω–µ—Ç–∞:* {signal['name']}\n"
        f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {signal['entry_price']}\n"
        f"*–¶–µ–ª—å:* {signal['target_price']} (+5%)\n"
        f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* {signal['stop_loss']}\n"
        f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {signal['probability']}%"
    )
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"follow_{signal['id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

# –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π
async def follow_coin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    coin_id = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    await start_tracking(user_id, coin_id, context)

    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text(f"‚è± –ú–æ–Ω–µ—Ç–∞ *{coin_id}* —Ç–µ–ø–µ—Ä—å –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º!", parse_mode="Markdown")

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
async def stop_tracking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stop_all_trackings(user_id)
    await update.message.reply_text("‚ùå –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –°–±—Ä–æ—Å –∫–µ—à–∞
async def reset_cache_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists("top_signals_cache.json"):
        os.remove("top_signals_cache.json")
        await update.message.reply_text("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω.")
    else:
        await update.message.reply_text("–ö–µ—à —É–∂–µ –ø—É—Å—Ç.")
