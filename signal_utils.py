import logging
from analysis import analyze_cryptos
from crypto_list import CRYPTO_LIST
from crypto_utils import fetch_all_coin_data

_signal_index = 0

def reset_signal_index():
    global _signal_index
    _signal_index = 0

async def get_next_signal_message():
    global _signal_index

    try:
        coin_ids = [coin['id'] for coin in CRYPTO_LIST]
        coin_data = await fetch_all_coin_data(coin_ids)

        top_signals = await analyze_cryptos(coin_data)

        if not top_signals or _signal_index >= len(top_signals):
            reset_signal_index()
            raise Exception("–°–∏–≥–Ω–∞–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        signal = top_signals[_signal_index]
        _signal_index += 1

        coin_id = signal["id"]
        entry_price = signal["entry_price"]
        target_price = signal["target_price"]
        stop_loss = signal["stop_loss"]
        probability = signal["probability"]

        message = (
            f"üíπ <b>{coin_id.upper()}</b>\n\n"
            f"üéØ –¶–µ–ª—å: +5%\n"
            f"üîπ –í—Ö–æ–¥: {entry_price}\n"
            f"üìà –¶–µ–ª—å: {target_price}\n"
            f"üõ° –°—Ç–æ–ø: {stop_loss}\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {probability}%"
        )

        return message, coin_id, entry_price

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        raise
