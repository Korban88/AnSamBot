import random
from analysis import analyze_cryptos
from crypto_utils import fetch_all_coin_data

signal_index = 0

async def get_next_signal_message():
    global signal_index

    coin_data = await fetch_all_coin_data()
    top_cryptos = await analyze_cryptos(coin_data)

    if not top_cryptos:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–Ω–µ—Ç—ã.", None, None

    crypto = top_cryptos[signal_index % len(top_cryptos)]
    signal_index += 1

    coin_id = crypto["id"]
    symbol = crypto["symbol"]
    entry_price = crypto["price"]
    target_price = round(entry_price * 1.05, 4)
    stop_loss = round(entry_price * 0.97, 4)
    probability = crypto["probability"]
    rsi = crypto["rsi"]
    ma = crypto["ma"]
    change_24h = crypto["change_24h"]

    message = (
        f"*üí∞ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {symbol.upper()}*\n\n"
        f"*üéØ –¶–µ–ª—å:* +5%\n"
        f"*üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${entry_price}\n"
        f"*üìà –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞:* ${target_price}\n"
        f"*üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å:* ${stop_loss}\n\n"
        f"*üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {probability}%\n"
        f"*RSI:* {rsi}\n"
        f"*MA (7–¥):* {ma}\n"
        f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* {change_24h}%"
    )

    return message, coin_id, entry_price

def reset_signal_index():
    global signal_index
    signal_index = 0
