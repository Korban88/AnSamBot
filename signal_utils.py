from analysis import analyze_cryptos
from crypto_utils import fetch_all_coin_data
from crypto_list import CRYPTO_LIST

signal_index = 0

async def get_next_signal_message():
    global signal_index
    coin_data = await fetch_all_coin_data(CRYPTO_LIST)
    top_3 = await analyze_cryptos(coin_data)

    if not top_3:
        raise Exception("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞")

    coin = top_3[signal_index % len(top_3)]
    signal_index += 1

    coin_id = coin["id"]
    probability = coin["probability"]
    entry_price = coin["entry_price"]
    target_price = coin["target_price"]
    stop_loss_price = coin["stop_loss_price"]
    rsi = coin["rsi"]
    ma = coin["ma"]
    change_24h = coin["change_24h"]

    message = (
        f"üìà <b>–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç</b>\n\n"
        f"–ú–æ–Ω–µ—Ç–∞: <b>{coin_id}</b>\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <code>{entry_price}</code>\n"
        f"–¶–µ–ª—å +5%: <code>{target_price}</code>\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: <code>{stop_loss_price}</code>\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: <b>{probability:.1f}%</b>\n\n"
        f"<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"‚Ä¢ RSI: {rsi} ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏\n"
        f"‚Ä¢ MA: {ma} ‚Äî —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è\n"
        f"‚Ä¢ 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change_24h}%"
    )

    return message, coin_id, entry_price

def reset_signal_index():
    global signal_index
    signal_index = 0
