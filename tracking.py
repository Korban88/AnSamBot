import asyncio
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from crypto_utils import get_current_price
from crypto_list import TELEGRAM_WALLET_COIN_IDS
import json
import os
import logging
import pytz

TRACKING_FILE = "tracking_data.json"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

class CoinTracker:
    tracked = {}

    @staticmethod
    def get_coin_id(symbol):
        for cid, sym in TELEGRAM_WALLET_COIN_IDS.items():
            if sym.lower() == symbol.lower():
                return cid
        return None

    @staticmethod
    def track(user_id, symbol, context: ContextTypes.DEFAULT_TYPE):
        now = datetime.now(MOSCOW_TZ)
        coin_id = CoinTracker.get_coin_id(symbol)
        if not coin_id:
            logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CoinGecko ID –¥–ª—è {symbol}")
            return

        CoinTracker.tracked.setdefault(str(user_id), {})[symbol] = {
            "symbol": symbol,
            "coin_id": coin_id,
            "start_time": now.isoformat(),
            "initial_price": None
        }
        CoinTracker.save_tracking_data()
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {symbol.upper()} (ID: {coin_id})")

        # —Å—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ü–µ–Ω—É
        async def set_initial_price():
            attempts = 0
            while attempts < 3:
                price = await get_current_price(coin_id)
                if price:
                    CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = price
                    CoinTracker.save_tracking_data()
                    logging.info(f"üìå –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {symbol.upper()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}")
                    return
                attempts += 1
                logging.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {symbol.upper()}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                await asyncio.sleep(20)
            CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = "fetch_error"
            CoinTracker.save_tracking_data()
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol.upper()} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

        asyncio.create_task(set_initial_price())
        asyncio.create_task(CoinTracker.monitor(user_id, symbol, context))

    @staticmethod
    async def monitor(user_id, symbol, context: ContextTypes.DEFAULT_TYPE):
        await asyncio.sleep(10)
        start_time = datetime.now(MOSCOW_TZ)

        coin_id = CoinTracker.tracked[str(user_id)][symbol].get("coin_id")
        if not coin_id:
            logging.error(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol.upper()} –±–µ–∑ coin_id ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return

        initial_price = CoinTracker.tracked[str(user_id)][symbol].get("initial_price")
        if not initial_price or initial_price == "fetch_error":
            initial_price = await get_current_price(coin_id)
            if initial_price:
                CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = initial_price
                CoinTracker.save_tracking_data()
                logging.info(f"üìå (monitor) –¶–µ–Ω–∞ {symbol.upper()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {initial_price}")

        while True:
            await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

            current_price = await get_current_price(coin_id)
            if current_price is None or not initial_price or initial_price == "fetch_error":
                continue

            percent_change = ((current_price - initial_price) / initial_price) * 100

            if percent_change >= 5:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üöÄ {symbol.upper()} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +5%!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )
                CoinTracker.tracked[str(user_id)].pop(symbol, None)
                CoinTracker.save_tracking_data()
                break

            elif percent_change >= 3.5:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî {symbol.upper()} –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ (+3.5%). –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )

            elapsed = datetime.now(MOSCOW_TZ) - start_time
            if elapsed >= timedelta(hours=12):
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –° –º–æ–º–µ–Ω—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤.\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol.upper()}: {percent_change:.2f}%"
                )
                CoinTracker.tracked[str(user_id)].pop(symbol, None)
                CoinTracker.save_tracking_data()
                break

    @staticmethod
    def clear_all():
        CoinTracker.tracked.clear()
        CoinTracker.save_tracking_data()
        logging.info("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")

    @staticmethod
    def save_tracking_data():
        try:
            with open(TRACKING_FILE, "w") as f:
                json.dump(CoinTracker.tracked, f, indent=2)
            logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {CoinTracker.tracked}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ tracking_data.json: {e}")

    @staticmethod
    def load_tracking_data():
        if os.path.exists(TRACKING_FILE):
            try:
                with open(TRACKING_FILE, "r") as f:
                    CoinTracker.tracked = json.load(f)
                logging.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π: {CoinTracker.tracked}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ tracking_data.json: {e}")
                CoinTracker.tracked = {}
        else:
            CoinTracker.tracked = {}
            logging.info("‚ö†Ô∏è tracking_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å—Ç–∞—Ä—Ç —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")

    @staticmethod
    async def evening_report(context: ContextTypes.DEFAULT_TYPE):
        CoinTracker.load_tracking_data()
        for user_id, coins in CoinTracker.tracked.items():
            if not coins:
                continue
            report_lines = ["üìä –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:"]
            for symbol, data in coins.items():
                coin_id = data.get("coin_id")
                current_price = await get_current_price(coin_id)
                if not current_price or not data.get("initial_price") or data["initial_price"] == "fetch_error":
                    logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol.upper()} –≤ –æ—Ç—á—ë—Ç–µ")
                    continue
                percent_change = ((current_price - data["initial_price"]) / data["initial_price"]) * 100

                if percent_change >= 4.5:
                    status = "üöÄ –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏ ‚Äî –º–æ–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å"
                elif percent_change >= 3.5:
                    status = "‚úÖ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ ‚Äî –¥–µ—Ä–∂–∞—Ç—å"
                elif percent_change <= -2:
                    status = "‚ö†Ô∏è –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É ‚Äî –ø–æ–¥—É–º–∞–π –æ –≤—ã—Ö–æ–¥–µ"
                else:
                    status = "‚ÑπÔ∏è —É–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –¥–µ—Ä–∂–∞—Ç—å"

                start_time_local = datetime.fromisoformat(data["start_time"]).astimezone(MOSCOW_TZ)
                report_lines.append(
                    f"{symbol.upper()} ‚Äî {percent_change:.2f}% | {status} "
                    f"(—Ü–µ–Ω–∞: ${current_price:.4f}, —Å—Ç–∞—Ä—Ç: {start_time_local.strftime('%H:%M')})"
                )

            if len(report_lines) > 1:
                await context.bot.send_message(chat_id=int(user_id), text="\n".join(report_lines))
                logging.info(f"‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    @staticmethod
    def run(context: ContextTypes.DEFAULT_TYPE):
        CoinTracker.load_tracking_data()
        for user_id, coins in CoinTracker.tracked.items():
            for symbol in coins.keys():
                asyncio.create_task(CoinTracker.monitor(int(user_id), symbol, context))
