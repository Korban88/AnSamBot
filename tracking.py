import asyncio
from datetime import datetime, timedelta

tracking_tasks = {}

async def start_tracking(bot, user_id, coin_id, start_price):
    async def track():
        start_time = datetime.now()
        initial_price = start_price

        while True:
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
            new_price = await get_price(coin_id)
            if not new_price:
                continue

            price_change = ((new_price - initial_price) / initial_price) * 100
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –Ω–∞ 3.5%
            if price_change >= 3.5:
                await bot.send_message(user_id, f"üöÄ {coin_id} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +{round(price_change, 2)}%! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {new_price} $")
                break

            # –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
            if datetime.now() - start_time >= timedelta(hours=12):
                result = "–≤—ã—Ä–æ—Å–ª–∞" if price_change > 0 else "—É–ø–∞–ª–∞" if price_change < 0 else "–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
                await bot.send_message(
                    user_id,
                    f"‚è± –ó–∞ 12 —á–∞—Å–æ–≤ –º–æ–Ω–µ—Ç–∞ {coin_id} {result}.\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {round(price_change, 2)}% (—Å {initial_price} $ –¥–æ {new_price} $)"
                )
                break

    task = asyncio.create_task(track())
    tracking_tasks.setdefault(user_id, []).append(task)


async def get_price(coin_id):
    # –¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –°–µ–π—á–∞—Å ‚Äî —Ñ–µ–π–∫–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    import random
    return round(random.uniform(0.95, 1.05), 4)

def stop_all_trackings(user_id):
    tasks = tracking_tasks.get(user_id, [])
    for task in tasks:
        task.cancel()
    tracking_tasks[user_id] = []
