import asyncio
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
tracking_tasks = {}

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
async def track_coin_price(update, context, coin_id, query=None):
    user_id = update.effective_user.id

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    if user_id in tracking_tasks and coin_id in tracking_tasks[user_id]:
        tracking_tasks[user_id][coin_id].cancel()

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    task = asyncio.create_task(check_price_periodically(context, user_id, coin_id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    if user_id not in tracking_tasks:
        tracking_tasks[user_id] = {}
    tracking_tasks[user_id][coin_id] = task

    msg = f"–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã *{coin_id}*. –Ø —Å–æ–æ–±—â—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ +3.5% –∏–ª–∏ +5%."
    if query:
        await query.edit_message_text(msg, parse_mode="Markdown")
    else:
        await update.message.reply_text(msg, parse_mode="Markdown")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
async def check_price_periodically(context, user_id, coin_id):
    from crypto_utils import get_current_prices

    initial_data = await get_current_prices([coin_id])
    if coin_id not in initial_data:
        return

    initial_price = initial_data[coin_id]["usd"]
    started_at = context.application.create_task_time

    while True:
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

        current_data = await get_current_prices([coin_id])
        if coin_id not in current_data:
            continue

        current_price = current_data[coin_id]["usd"]
        change = (current_price - initial_price) / initial_price * 100

        if change >= 5:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üöÄ –ú–æ–Ω–µ—Ç–∞ *{coin_id}* –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ *+5%*! –° —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π: {current_price}",
                parse_mode="Markdown"
            )
            break
        elif change >= 3.5:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ú–æ–Ω–µ—Ç–∞ *{coin_id}* –¥–æ—Å—Ç–∏–≥–ª–∞ +3.5% —Ä–æ—Å—Ç–∞. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}",
                parse_mode="Markdown"
            )

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –µ—Å–ª–∏ 12 —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        elapsed = (context.application.create_task_time - started_at).total_seconds() / 3600
        if elapsed > 12:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚è± –ú–æ–Ω–µ—Ç–∞ *{coin_id}* –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–æ—Å—Ç–∞ +3.5% –∑–∞ 12 —á–∞—Å–æ–≤. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {change:.2f}%"
            )
            break

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
def stop_all_trackings():
    for user_tasks in tracking_tasks.values():
        for task in user_tasks.values():
            task.cancel()
    tracking_tasks.clear()
