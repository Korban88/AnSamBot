import json
import os
import time
from datetime import datetime
from aiogram import Bot
import asyncio

from config import NOTIFICATION_INTERVAL_SECONDS, TRACKING_FILE, GROWTH_THRESHOLD_PERCENT, TARGET_PROFIT_PERCENT
from crypto_utils import get_current_price

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤
def load_tracking_data():
    if not os.path.exists(TRACKING_FILE):
        return {}
    with open(TRACKING_FILE, 'r') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤
def save_tracking_data(data):
    with open(TRACKING_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
def start_tracking(coin_id: str, user_id: int, initial_price: float):
    data = load_tracking_data()
    data[coin_id] = {
        'user_id': user_id,
        'start_time': time.time(),
        'initial_price': initial_price
    }
    save_tracking_data(data)

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏–Ω–≥–∏
def stop_all_tracking():
    save_tracking_data({})

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
async def tracking_loop(bot: Bot):
    while True:
        data = load_tracking_data()
        updated_data = {}
        for coin_id, info in data.items():
            user_id = info['user_id']
            start_time = info['start_time']
            initial_price = info['initial_price']

            current_price = await get_current_price(coin_id)
            if current_price is None:
                continue

            percent_change = ((current_price - initial_price) / initial_price) * 100

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ +3.5% –∏–ª–∏ +5%
            if percent_change >= TARGET_PROFIT_PERCENT:
                await bot.send_message(user_id, f"üìà –ú–æ–Ω–µ—Ç–∞ *{coin_id}* –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ *{percent_change:.2f}%* üöÄ", parse_mode='MarkdownV2')
                continue  # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ updated_data ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            elif percent_change >= GROWTH_THRESHOLD_PERCENT:
                await bot.send_message(user_id, f"üîî *{coin_id}* –¥–æ—Å—Ç–∏–≥–ª–∞ +{GROWTH_THRESHOLD_PERCENT}% —Ä–æ—Å—Ç–∞ \\({percent_change:.2f}%\\)", parse_mode='MarkdownV2')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 12 —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è
            elapsed_hours = (time.time() - start_time) / 3600
            if elapsed_hours >= 12:
                await bot.send_message(user_id, f"‚è∞ –ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è *{coin_id}*. –ò–∑–º–µ–Ω–µ–Ω–∏–µ: *{percent_change:.2f}%*", parse_mode='MarkdownV2')
                continue  # –∑–∞–≤–µ—Ä—à–µ–Ω–æ

            updated_data[coin_id] = info

        save_tracking_data(updated_data)
        await asyncio.sleep(NOTIFICATION_INTERVAL_SECONDS)
