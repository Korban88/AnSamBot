# tracking.py

import asyncio
import time
from datetime import datetime
from aiogram import Bot
from config import TELEGRAM_USER_ID
from crypto_utils import get_current_price

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
active_trackings = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
CHECK_INTERVAL = 600  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
PRICE_TARGET_1 = 1.035
PRICE_TARGET_2 = 1.05
MAX_TRACKING_DURATION = 12 * 60 * 60  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def track_price(bot: Bot, coin_id: str, entry_price: float):
    start_time = time.time()
    notified_3_5 = False
    notified_5 = False

    while True:
        current_price = await get_current_price(coin_id)

        if current_price is None:
            await bot.send_message(TELEGRAM_USER_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {coin_id}. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            break

        price_change = current_price / entry_price
        elapsed = time.time() - start_time

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ +3.5%
        if price_change >= PRICE_TARGET_1 and not notified_3_5:
            await bot.send_message(
                TELEGRAM_USER_ID,
                f"üìà {coin_id.upper()} –≤—ã—Ä–æ—Å –Ω–∞ +3.5% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ {entry_price:.4f} –∏ —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç {current_price:.4f}."
            )
            notified_3_5 = True

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ +5%
        if price_change >= PRICE_TARGET_2 and not notified_5:
            await bot.send_message(
                TELEGRAM_USER_ID,
                f"üöÄ {coin_id.upper()} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ +5%!\n–í—Ö–æ–¥ –±—ã–ª: {entry_price:.4f}, —Å–µ–π—á–∞—Å: {current_price:.4f}"
            )
            notified_5 = True
            break

        # –û—Ç—á—ë—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤
        if elapsed >= MAX_TRACKING_DURATION:
            percent_change = ((current_price - entry_price) / entry_price) * 100
            await bot.send_message(
                TELEGRAM_USER_ID,
                f"‚è± –ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {coin_id.upper()}.\n"
                f"–¶–µ–Ω–∞ –±—ã–ª–∞: {entry_price:.4f}, —Å–µ–π—á–∞—Å: {current_price:.4f}\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change:.2f}%"
            )
            break

        await asyncio.sleep(CHECK_INTERVAL)

    # –£–¥–∞–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    if coin_id in active_trackings:
        del active_trackings[coin_id]

def start_tracking(bot: Bot, coin_id: str, entry_price: float):
    if coin_id not in active_trackings:
        task = asyncio.create_task(track_price(bot, coin_id, entry_price))
        active_trackings[coin_id] = task

def stop_all_trackings():
    for task in active_trackings.values():
        task.cancel()
    active_trackings.clear()
