import asyncio
import httpx
import logging
from config import OWNER_ID
from crypto_utils import get_current_price

class CoinTracker:
    def __init__(self, bot, coin, start_price):
        self.bot = bot
        self.coin = coin
        self.start_price = start_price
        self.tracking_time = 0  # –≤ –º–∏–Ω—É—Ç–∞—Ö

    async def track(self):
        while self.tracking_time < 720:  # 12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω—É—Ç
            try:
                current_price = await get_current_price(self.coin["id"])
                if not current_price:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {self.coin['symbol']}")
                    break

                percent_change = ((current_price - self.start_price) / self.start_price) * 100

                if percent_change >= 5:
                    await self.bot.send_message(
                        OWNER_ID,
                        f"üöÄ –ú–æ–Ω–µ—Ç–∞ {self.coin['symbol']} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 5%!\n\n"
                        f"üîπ –°—Ç–∞—Ä—Ç: {self.start_price:.4f} USD\n"
                        f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USD\n"
                        f"üîπ –†–æ—Å—Ç: {percent_change:.2f}%"
                    )
                    break

                elif percent_change >= 3.5:
                    await self.bot.send_message(
                        OWNER_ID,
                        f"üìà –ú–æ–Ω–µ—Ç–∞ {self.coin['symbol']} –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏: +3.5%\n\n"
                        f"üîπ –°—Ç–∞—Ä—Ç: {self.start_price:.4f} USD\n"
                        f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USD\n"
                        f"üîπ –†–æ—Å—Ç: {percent_change:.2f}%"
                    )

                self.tracking_time += 10
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ {self.coin['symbol']}: {e}")
                break

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ –∏ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        if self.tracking_time >= 720:
            final_price = await get_current_price(self.coin["id"])
            if final_price:
                final_change = ((final_price - self.start_price) / self.start_price) * 100
                await self.bot.send_message(
                    OWNER_ID,
                    f"‚è∞ –ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤. –ú–æ–Ω–µ—Ç–∞ {self.coin['symbol']} –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏.\n\n"
                    f"üîπ –°—Ç–∞—Ä—Ç: {self.start_price:.4f} USD\n"
                    f"üîπ –ö–æ–Ω–µ—Ü: {final_price:.4f} USD\n"
                    f"üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {final_change:.2f}%"
                )

# –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ main.py)
class CoinTrackingManager:
    def __init__(self):
        self.trackers = []

    def add_tracker(self, tracker):
        self.trackers.append(tracker)

    async def run(self):
        tasks = [tracker.track() for tracker in self.trackers]
        await asyncio.gather(*tasks)
