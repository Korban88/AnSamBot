import asyncio
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from crypto_utils import get_current_price
from crypto_list import TELEGRAM_WALLET_COIN_IDS
import json
import os
import logging
import pytz

TRACKING_FILE = "tracking_data.json"
RISK_GUARD_FILE = "risk_guard.json"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

class CoinTracker:
    tracked = {}

    @staticmethod
    def get_coin_id(symbol):
        for cid, sym in TELEGRAM_WALLET_COIN_IDS.items():
            if sym.lower() == symbol.lower():
                return cid
        return None

    @staticmethod
    def _bump_risk_guard(kind: str):
        """kind: 'target' | 'stop' | 'ttl' | 'trail'"""
        today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
        data = {"date": today, "stops": 0, "targets": 0}
        try:
            if os.path.exists(RISK_GUARD_FILE):
                with open(RISK_GUARD_FILE, "r") as f:
                    data = json.load(f)
            if data.get("date") != today:
                data = {"date": today, "stops": 0, "targets": 0}
        except Exception:
            data = {"date": today, "stops": 0, "targets": 0}

        if kind in ("stop", "ttl"):
            data["stops"] = int(data.get("stops", 0)) + 1
        elif kind in ("target", "trail"):
            data["targets"] = int(data.get("targets", 0)) + 1

        try:
            with open(RISK_GUARD_FILE, "w") as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {RISK_GUARD_FILE}: {e}")

    @staticmethod
    def track(user_id, symbol, context: ContextTypes.DEFAULT_TYPE):
        now = datetime.now(MOSCOW_TZ)
        coin_id = CoinTracker.get_coin_id(symbol)
        if not coin_id:
            logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CoinGecko ID –¥–ª—è {symbol}")
            return

        CoinTracker.tracked.setdefault(str(user_id), {})[symbol] = {
            "symbol": symbol,
            "coin_id": coin_id,
            "start_time": now.isoformat(),
            "initial_price": None,
            # –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
            "notified_approaching_3_5": False,
            "notified_reached_3_5": False,
            "notified_reached_5": False,
            "notified_near_stop_loss": False,
            "notified_hit_stop_loss": False,
            "notified_12h": False,
            # —Ç—Ä–µ–π–ª–∏–Ω–≥
            "peak_change": 0.0,
            "trailing_armed": False,
            # —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏
            "ttl_hours": 48
        }
        CoinTracker.save_tracking_data()
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {symbol.upper()} (ID: {coin_id})")

        async def set_initial_price():
            attempts = 0
            while attempts < 3:
                price = await get_current_price(coin_id)
                if price:
                    CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = price
                    CoinTracker.save_tracking_data()
                    logging.info(f"üìå –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {symbol.upper()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}")
                    return
                attempts += 1
                logging.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {symbol.upper()}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                await asyncio.sleep(20)
            CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = "fetch_error"
            CoinTracker.save_tracking_data()
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol.upper()} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

        asyncio.create_task(set_initial_price())
        asyncio.create_task(CoinTracker.monitor(user_id, symbol, context))

    @staticmethod
    async def monitor(user_id, symbol, context: ContextTypes.DEFAULT_TYPE):
        await asyncio.sleep(10)
        start_time = datetime.now(MOSCOW_TZ)

        coin_id = CoinTracker.tracked[str(user_id)][symbol].get("coin_id")
        if not coin_id:
            return

        initial_price = CoinTracker.tracked[str(user_id)][symbol].get("initial_price")
        if not initial_price or initial_price == "fetch_error":
            initial_price = await get_current_price(coin_id)
            if initial_price:
                CoinTracker.tracked[str(user_id)][symbol]["initial_price"] = initial_price
                CoinTracker.save_tracking_data()

        while True:
            await asyncio.sleep(600)

            current_price = await get_current_price(coin_id)
            if current_price is None or not initial_price or initial_price == "fetch_error":
                continue

            percent_change = ((current_price - initial_price) / initial_price) * 100
            coin_data = CoinTracker.tracked[str(user_id)][symbol]

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫
            if percent_change > coin_data["peak_change"]:
                coin_data["peak_change"] = float(percent_change)
                CoinTracker.save_tracking_data()

            # üéØ —Ü–µ–ª–∏ –≤–≤–µ—Ä—Ö
            if percent_change >= 5 and not coin_data["notified_reached_5"]:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üöÄ {symbol.upper()} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +5%!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )
                coin_data["notified_reached_5"] = True
                CoinTracker._bump_risk_guard("target")
                CoinTracker.tracked[str(user_id)].pop(symbol, None)
                CoinTracker.save_tracking_data()
                break

            elif percent_change >= 3.5 and not coin_data["notified_reached_3_5"]:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéØ {symbol.upper()} –¥–æ—Å—Ç–∏–≥–ª–∞ +3.5%!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}\n"
                         f"–í–∫–ª—é—á–∞—é –∑–∞—â–∏—Ç—É –ø—Ä–∏–±—ã–ª–∏: —Ç—Ä–µ–π–ª–∏–Ω–≥ 1.5% –æ—Ç –ø–∏–∫–∞."
                )
                coin_data["notified_reached_3_5"] = True
                coin_data["trailing_armed"] = True
                CoinTracker.save_tracking_data()

            elif percent_change >= 3 and not coin_data["notified_approaching_3_5"]:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî {symbol.upper()} –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ (+3.5%). –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )
                coin_data["notified_approaching_3_5"] = True
                CoinTracker.save_tracking_data()

            # üß≤ —Ç—Ä–µ–π–ª–∏–Ω–≥ –ø–æ—Å–ª–µ 3.5%: –æ—Ç–∫–∞—Ç ‚â•1.5% –æ—Ç –ø–∏–∫–∞ –∏ –ø—Ä–∏ —ç—Ç–æ–º —Ç–µ–∫—É—â–∞—è ‚â• +0.3%
            if coin_data.get("trailing_armed"):
                drawdown = coin_data["peak_change"] - percent_change
                if drawdown >= 1.5 and percent_change >= 0.3:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=(f"‚úÖ {symbol.upper()}: —Ç—Ä–µ–π–ª–∏–Ω–≥‚Äë—Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª (+{percent_change:.2f}% –æ—Ç –≤—Ö–æ–¥–∞). "
                              f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                    )
                    CoinTracker._bump_risk_guard("trail")
                    CoinTracker.tracked[str(user_id)].pop(symbol, None)
                    CoinTracker.save_tracking_data()
                    break

            # ‚õî —Å—Ç–æ–ø‚Äë–ª–æ–≥–∏–∫–∞ –≤–Ω–∏–∑: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å—Ç–æ–ø
            if percent_change <= -2 and not coin_data["notified_near_stop_loss"]:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üìâ {symbol.upper()} –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å—É (‚àí2%). –ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–µ–Ω.\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )
                coin_data["notified_near_stop_loss"] = True
                CoinTracker.save_tracking_data()

            if percent_change <= -3 and not coin_data["notified_hit_stop_loss"]:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚õî {symbol.upper()} —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å (‚àí3%). –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–π—Ç–∏.\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}"
                )
                coin_data["notified_hit_stop_loss"] = True
                CoinTracker._bump_risk_guard("stop")
                CoinTracker.tracked[str(user_id)].pop(symbol, None)
                CoinTracker.save_tracking_data()
                break

            # üïë –≤—Ä–µ–º—è: 12—á –∞–ø–¥–µ–π—Ç + TTL 48—á –Ω–∞ –≤—ã—Ö–æ–¥ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è
            elapsed = (datetime.now(MOSCOW_TZ) - start_time)
            if elapsed >= timedelta(hours=12) and not coin_data.get("notified_12h"):
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ÑπÔ∏è 12 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞ –ø–æ {symbol.upper()}. –¢–µ–∫—É—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {percent_change:.2f}%."
                )
                coin_data["notified_12h"] = True
                CoinTracker.save_tracking_data()

            ttl_hours = coin_data.get("ttl_hours", 48)
            if elapsed >= timedelta(hours=ttl_hours):
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(f"üö´ –°–∏–≥–Ω–∞–ª –ø–æ {symbol.upper()} –∏—Å—Ç—ë–∫ (–±–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –∑–∞ {ttl_hours}—á). "
                          f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–π—Ç–∏ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª.")
                )
                CoinTracker._bump_risk_guard("ttl")
                CoinTracker.tracked[str(user_id)].pop(symbol, None)
                CoinTracker.save_tracking_data()
                break

    @staticmethod
    def clear_all():
        CoinTracker.tracked.clear()
        CoinTracker.save_tracking_data()

    @staticmethod
    def save_tracking_data():
        try:
            with open(TRACKING_FILE, "w") as f:
                json.dump(CoinTracker.tracked, f, indent=2)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ tracking_data.json: {e}")

    @staticmethod
    def load_tracking_data():
        if os.path.exists(TRACKING_FILE):
            try:
                with open(TRACKING_FILE, "r") as f:
                    CoinTracker.tracked = json.load(f)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ tracking_data.json: {e}")
                CoinTracker.tracked = {}
        else:
            CoinTracker.tracked = {}

    @staticmethod
    async def evening_report(context: ContextTypes.DEFAULT_TYPE):
        CoinTracker.load_tracking_data()
        for user_id, coins in CoinTracker.tracked.items():
            if not coins:
                continue
            report_lines = ["üìä –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:"]
            for symbol, data in coins.items():
                coin_id = data.get("coin_id")
                current_price = await get_current_price(coin_id)
                if not current_price or not data.get("initial_price") or data["initial_price"] == "fetch_error":
                    continue
                percent_change = ((current_price - data["initial_price"]) / data["initial_price"]) * 100

                if percent_change >= 4.5:
                    status = "üöÄ –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏ ‚Äî –º–æ–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å"
                elif percent_change >= 3.5:
                    status = "‚úÖ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ ‚Äî –¥–µ—Ä–∂–∞—Ç—å"
                elif percent_change <= -2:
                    status = "‚ö†Ô∏è –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å—É ‚Äî –ø–æ–¥—É–º–∞–π –æ –≤—ã—Ö–æ–¥–µ"
                else:
                    status = "‚ÑπÔ∏è —É–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –¥–µ—Ä–∂–∞—Ç—å"

                start_time_local = datetime.fromisoformat(data["start_time"]).astimezone(MOSCOW_TZ)
                report_lines.append(
                    f"{symbol.upper()} ‚Äî {percent_change:.2f}% | {status} "
                    f"(—Ü–µ–Ω–∞: ${current_price:.4f}, —Å—Ç–∞—Ä—Ç: {start_time_local.strftime('%H:%M')})"
                )

            if len(report_lines) > 1:
                await context.bot.send_message(chat_id=int(user_id), text="\n".join(report_lines))

    @staticmethod
    def run(context: ContextTypes.DEFAULT_TYPE):
        CoinTracker.load_tracking_data()
        for user_id, coins in CoinTracker.tracked.items():
            for symbol in coins.keys():
                asyncio.create_task(CoinTracker.monitor(int(user_id), symbol, context))
