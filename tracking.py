import asyncio
import time
import logging

class CoinTracker:
    def __init__(self, bot, user_id):
        self.bot = bot
        self.user_id = user_id
        self.tracked = {}
        self.running = False

    def start_tracking(self, coin_id, entry_price):
        self.tracked[coin_id] = {
            "entry": entry_price,
            "start": time.time(),
            "notified_3_5": False,
            "notified_5": False,
        }
        logging.info(f"‚úÖ –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id} –ø–æ —Ü–µ–Ω–µ {entry_price}")

    def stop_all_tracking(self):
        logging.info("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        self.tracked.clear()

    def run(self):
        if not self.running:
            self.running = True
            asyncio.create_task(self._loop())
            logging.info("‚ñ∂Ô∏è –¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

    async def _loop(self):
        while True:
            if not self.tracked:
                await asyncio.sleep(10)
                continue

            for coin_id in list(self.tracked.keys()):
                try:
                    price = await self.get_price(coin_id)
                    data = self.tracked[coin_id]
                    entry = data["entry"]
                    now = time.time()
                    change_percent = (price - entry) / entry * 100

                    if not data["notified_3_5"] and change_percent >= 3.5:
                        await self.bot.send_message(
                            self.user_id,
                            f"üìà –ú–æ–Ω–µ—Ç–∞ <b>{coin_id}</b> –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ <b>+3.5%</b>!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{price}$</b>"
                        )
                        data["notified_3_5"] = True
                        logging.info(f"üîî {coin_id}: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ +3.5% –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                    if not data["notified_5"] and change_percent >= 5:
                        await self.bot.send_message(
                            self.user_id,
                            f"üöÄ –ú–æ–Ω–µ—Ç–∞ <b>{coin_id}</b> –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ <b>+5%</b>!\n–¶–µ–Ω–∞: <b>{price}$</b>"
                        )
                        data["notified_5"] = True
                        logging.info(f"üéØ {coin_id}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å +5%")

                    if now - data["start"] >= 43200:  # 12 —á–∞—Å–æ–≤
                        if not data["notified_5"]:
                            diff = round(change_percent, 2)
                            await self.bot.send_message(
                                self.user_id,
                                f"üïõ 12 —á–∞—Å–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {coin_id} –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff}%\n–¶–µ–Ω–∞: {price}$"
                            )
                        self.tracked.pop(coin_id)
                        logging.info(f"üì§ {coin_id}: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–ø—É—Å—Ç—è 12 —á–∞—Å–æ–≤")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ {coin_id}: {e}")
            await asyncio.sleep(60)

    async def get_price(self, coin_id):
        from pycoingecko import CoinGeckoAPI
        cg = CoinGeckoAPI()
        data = cg.get_price(ids=coin_id, vs_currencies='usd')
        return float(data[coin_id]["usd"])
