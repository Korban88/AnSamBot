# scheduler.py

import asyncio
from aiogram import Dispatcher, Bot
from datetime import datetime, timedelta
from crypto_utils import get_top_coins

async def send_daily_signal(bot: Bot, user_id: int, get_top_coins_func):
    coins = get_top_coins_func()
    print("‚è∞ Daily check coins:", coins)

    if not coins:
        await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã.", parse_mode="MarkdownV2")
        return

    coin = coins[0]
    name = coin['id']
    price = coin['price']
    change = coin['change_24h']
    probability = coin['probability']
    target_price = coin['target_price']
    stop_loss_price = coin['stop_loss_price']

    text = (
        f"üí∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª:*\n"
        f"–ú–æ–Ω–µ—Ç–∞: `{name}`\n"
        f"–¶–µ–Ω–∞: *{price} \\$*\n"
        f"–†–æ—Å—Ç –∑–∞ 24—á: `{change}%`\n"
        f"{'üü¢' if probability >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{probability}%*\n"
        f"üéØ –¶–µ–ª—å: *{target_price} \\$* \\(+5%\\)\n"
        f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: *{stop_loss_price} \\$* \\(-3\\.5%\\)"
    )

    await bot.send_message(user_id, text, parse_mode="MarkdownV2")
    print(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {datetime.now().strftime('%H:%M:%S')}")

def schedule_daily_signal(dp: Dispatcher, bot: Bot, get_top_coins_func, user_id: int = None):
    async def daily_task():
        while True:
            now = datetime.now()
            next_run = now.replace(hour=8, minute=0, second=0, microsecond=0)
            if next_run < now:
                next_run += timedelta(days=1)

            wait_seconds = (next_run - now).total_seconds()
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {wait_seconds / 60:.1f} –º–∏–Ω—É—Ç")
            await asyncio.sleep(wait_seconds)

            if user_id:
                await send_daily_signal(bot, user_id, get_top_coins_func)

    asyncio.create_task(daily_task())
