import os
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
from config import OWNER_ID
from analysis import get_top_signal
from tracking import start_tracking

def reset_cache():
    """
    –°–±—Ä–æ—Å –∫—ç—à–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    """
    used_path = "used_symbols.json"
    if os.path.exists(used_path):
        os.remove(used_path)

async def send_signal_message(app):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: –ª—É—á—à–∞—è –º–æ–Ω–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
    """
    signal = get_top_signal()
    if not signal:
        await app.bot.send_message(chat_id=OWNER_ID, text="üö´ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    symbol = signal.get("symbol", "").upper()
    name = signal.get("name", "")
    current_price = signal.get("current_price", 0)
    target_price = round(current_price * 1.05, 4)
    stop_loss = round(current_price * 0.965, 4)
    change_24h = round(signal.get("price_change_percentage_24h", 0), 2)
    probability = signal.get("probability", 0)

    message = f"*üíπ –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {symbol} ({name})*\n\n" \
              f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `${current_price}`\n" \
              f"üéØ –¶–µ–ª—å: +5% ‚Üí `${target_price}`\n" \
              f"üõ° –°—Ç–æ–ø-–ª–æ—Å—Å: `${stop_loss}`\n" \
              f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: `{change_24h}%`\n" \
              f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{probability}%*\n"

    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥–∏—Ç—å"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{symbol}")]
    ])

    await app.bot.send_message(
        chat_id=OWNER_ID,
        text=message,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

def schedule_daily_signal_check(app):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø–æ –ú–°–ö
    """
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: app.create_task(send_signal_message(app)),
                      trigger='cron', hour=8, minute=0, id='daily_signal')
    scheduler.start()
