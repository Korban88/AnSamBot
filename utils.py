import json
import os
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from analysis import get_top_signal

scheduler = AsyncIOScheduler()

def schedule_daily_signal_check(app, user_id):
    scheduler.add_job(
        lambda: send_signal(app, user_id),
        CronTrigger(hour=8, minute=0, timezone="Europe/Moscow"),
        id="daily_signal",
        replace_existing=True,
    )
    scheduler.start()

async def send_signal(app, user_id):
    try:
        signal = await get_top_signal()
        if not signal:
            await app.bot.send_message(chat_id=user_id, text="–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∞–¥—ë–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")
            return

        text = (
            f"*üíπ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –º–æ–Ω–µ—Ç—ã: {signal['symbol']}*\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{signal['entry_price']}` $\n"
            f"–¶–µ–ª—å: `{signal['target_price']}` (+5%)\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{signal['stop_loss']}`\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: `{signal['change_24h']}%`\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['probability']}%*"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
        ])

        await app.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")
        await app.bot.send_message(chat_id=user_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")

def reset_cache():
    for file in ["used_symbols.json", "signals_cache.json", "indicators_cache.json"]:
        try:
            os.remove(file)
        except FileNotFoundError:
            pass
