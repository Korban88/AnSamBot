from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from analysis import get_top_signal
from config import OWNER_ID

scheduler = AsyncIOScheduler()

def schedule_daily_signal_check(app):
    scheduler.add_job(send_daily_signal, "cron", hour=8, minute=0, args=[app])
    scheduler.start()

async def send_daily_signal(app):
    signal = await get_top_signal()
    if signal:
        text = (
            f"üìà *–°–∏–≥–Ω–∞–ª –¥–Ω—è*\n"
            f"–ú–æ–Ω–µ—Ç–∞: *{signal['symbol']}*\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{signal['entry_price']}*\n"
            f"–¶–µ–ª—å: *{signal['target_price']}* (+5%)\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: *{signal['stop_loss']}*\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{signal['change_24h']}%*\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['probability']}%*"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
        ])

        await app.bot.send_message(
            chat_id=OWNER_ID,
            text=text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
    else:
        await app.bot.send_message(
            chat_id=OWNER_ID,
            text="–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.",
        )

def reset_cache():
    from os import remove
    try:
        remove("used_symbols.json")
    except FileNotFoundError:
        pass
