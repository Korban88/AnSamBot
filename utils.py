import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
from analysis import analyze_cryptos, ANALYSIS_LOG
from telegram.ext import Application

USED_SYMBOLS_FILE = "used_symbols.json"
SIGNAL_CACHE_FILE = "top_signals_cache.json"
MAX_SIGNAL_CACHE = 6

def reset_cache():
    if os.path.exists(SIGNAL_CACHE_FILE):
        os.remove(SIGNAL_CACHE_FILE)
    if os.path.exists(USED_SYMBOLS_FILE):
        os.remove(USED_SYMBOLS_FILE)

def load_used_symbols():
    if os.path.exists(USED_SYMBOLS_FILE):
        with open(USED_SYMBOLS_FILE, "r") as f:
            return json.load(f)
    return []

def save_used_symbol(symbol):
    used = load_used_symbols()
    if symbol not in used:
        used.append(symbol)
    with open(USED_SYMBOLS_FILE, "w") as f:
        json.dump(used[-MAX_SIGNAL_CACHE:], f)

def load_cached_signals():
    if os.path.exists(SIGNAL_CACHE_FILE):
        with open(SIGNAL_CACHE_FILE, "r") as f:
            return json.load(f)
    return []

def get_next_top_signal():
    signals = load_cached_signals()
    used = load_used_symbols()

    for signal in signals:
        if signal["symbol"] not in used:
            save_used_symbol(signal["symbol"])
            return signal
    return None

async def ensure_top_signals_available():
    signals = load_cached_signals()
    used = load_used_symbols()

    unused = [s for s in signals if s["symbol"] not in used]

    if not unused:
        print("‚ö†Ô∏è –ö–µ—à –ø—É—Å—Ç –∏–ª–∏ –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        top_signals = await analyze_cryptos()
        with open(SIGNAL_CACHE_FILE, "w") as f:
            json.dump(top_signals[:MAX_SIGNAL_CACHE], f)

async def refresh_signal_cache_job(app: Application):
    signals = load_cached_signals()
    used = load_used_symbols()
    unused = [s for s in signals if s["symbol"] not in used]

    if not unused:
        print("‚ôªÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        top_signals = await analyze_cryptos()
        with open(SIGNAL_CACHE_FILE, "w") as f:
            json.dump(top_signals[:MAX_SIGNAL_CACHE], f)
        print("‚úÖ –ö–µ—à —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        print("üü¢ –ö–µ—à —Å–∏–≥–Ω–∞–ª–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

def fnum(x):
    return f"{x:.2f}".rstrip('0').rstrip('.') if '.' in f"{x:.2f}" else f"{x:.2f}"

async def send_signal_message(user_id, context):
    await ensure_top_signals_available()
    signal = get_next_top_signal()

    if signal:
        price = float(signal.get("current_price", 0))
        target_price = round(price * 1.05, 6)
        stop_price = round(price * 0.97, 6)
        change_24h = float(signal.get("price_change_percentage_24h", 0))
        probability = signal.get("probability", "?")

        message = (
            f"*üöÄ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {signal['symbol']}*\n\n"
            f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* ${fnum(price)}\n"
            f"*–¶–µ–ª—å:* +5% ‚Üí ${fnum(target_price)}\n"
            f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* -3% ‚Üí ${fnum(stop_price)}\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* {fnum(change_24h)}%\n"
            f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {probability}%\n"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
        ])
        await context.bot.send_message(chat_id=user_id, text=message, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=user_id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.")

def schedule_daily_signal_check(app, owner_id):
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª
    scheduler.add_job(lambda: app.create_task(send_signal_message(owner_id, app)),
                      trigger='cron', hour=8, minute=0, id='daily_signal')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    scheduler.add_job(lambda: app.create_task(refresh_signal_cache_job(app)),
                      trigger='interval', hours=3, id='refresh_signal_cache')

    scheduler.start()

async def debug_cache_message(user_id, context):
    cached = load_cached_signals()
    used = load_used_symbols()

    cached_symbols = [c["symbol"] for c in cached]
    unused = [s for s in cached_symbols if s not in used]

    msg = f"*üì¶ –ö–µ—à —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
    msg += f"–í—Å–µ–≥–æ –≤ –∫–µ—à–µ: {len(cached_symbols)} –º–æ–Ω–µ—Ç\n"
    msg += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: {', '.join(used) if used else '‚Äî'}\n"
    msg += f"–û—Å—Ç–∞–ª–∏—Å—å: {', '.join(unused) if unused else '‚Äî'}"

    await context.bot.send_message(chat_id=user_id, text=msg, parse_mode="Markdown")

async def debug_analysis_message(user_id, context):
    if not ANALYSIS_LOG:
        await context.bot.send_message(chat_id=user_id, text="‚è≥ –ê–Ω–∞–ª–∏–∑ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è.")
    else:
        msg = "*üìä –û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–Ω–µ—Ç:*\n\n" + "\n".join(ANALYSIS_LOG[-50:])
        await context.bot.send_message(chat_id=user_id, text=msg, parse_mode="Markdown")
