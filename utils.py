import json
import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
from telegram.ext import Application
from analysis import analyze_cryptos, ANALYSIS_LOG
from config import OWNER_ID

USED_SYMBOLS_FILE = "used_symbols.json"
SIGNAL_CACHE_FILE = "top_signals_cache.json"

# –°–±—Ä–æ—Å –∫–µ—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
def reset_cache():
    if os.path.exists(SIGNAL_CACHE_FILE):
        os.remove(SIGNAL_CACHE_FILE)
    if os.path.exists(USED_SYMBOLS_FILE):
        os.remove(USED_SYMBOLS_FILE)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
def load_used_symbols():
    if os.path.exists(USED_SYMBOLS_FILE):
        with open(USED_SYMBOLS_FILE, "r") as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
def save_used_symbol(symbol):
    used = load_used_symbols()
    if symbol not in used:
        used.append(symbol)
        with open(USED_SYMBOLS_FILE, "w") as f:
            json.dump(used, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤
def load_signal_cache():
    if os.path.exists(SIGNAL_CACHE_FILE):
        with open(SIGNAL_CACHE_FILE, "r") as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤
def save_signal_cache(signals):
    with open(SIGNAL_CACHE_FILE, "w") as f:
        json.dump(signals, f)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
scheduler = BackgroundScheduler()

def schedule_daily_signal_check(app: Application):
    from utils import handle_scheduled_signal
    scheduler.add_job(lambda: app.create_task(handle_scheduled_signal(app)), trigger='cron', hour=8, minute=0, timezone='Europe/Moscow')
    scheduler.start()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_signal_message(user_id, context):
    signals = load_signal_cache()
    used = load_used_symbols()

    signal = None
    for s in signals:
        if s["symbol"] not in used:
            signal = s
            break

    if not signal:
        await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    save_used_symbol(signal["symbol"])

    price = float(str(signal.get("current_price", 0)).replace("$", ""))
    target = round(price * 1.05, 4)
    stop = round(price * 0.97, 4)
    change = signal.get("price_change_percentage_24h", 0)
    probability = signal.get("probability", 0)

    message = (
        f"üìà *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã {signal['symbol'].upper()}*
"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price}\n"
        f"–¶–µ–ª—å +5%: ${target}\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: ${stop}\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {probability}%\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change}%"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
    ])

    await context.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown", reply_markup=keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –≤–∏–¥–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def debug_cache_message(update, context):
    user_id = update.effective_chat.id
    signals = load_signal_cache()
    if not signals:
        await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ö—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return

    text = "*–ö—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
    for s in signals:
        symbol = s.get("symbol", "?").upper()
        prob = s.get("probability", "?")
        price = s.get("current_price", "?")
        change = s.get("price_change_percentage_24h", "?")
        text += f"{symbol} ‚Äî ${price}, Œî24—á: {change}%, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob}%\n"

    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ª–æ–≥–∞)
async def send_analysis_log(update, context):
    user_id = update.effective_chat.id
    if ANALYSIS_LOG:
        text = "*–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç:*\n" + "\n".join(ANALYSIS_LOG)
    else:
        text = "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è."
    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
