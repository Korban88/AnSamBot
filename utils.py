import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler
from analysis import analyze_cryptos
from telegram.ext import Application

USED_SYMBOLS_FILE = "used_symbols.json"
SIGNAL_CACHE_FILE = "top_signals_cache.json"

def reset_cache():
    if os.path.exists(SIGNAL_CACHE_FILE):
        os.remove(SIGNAL_CACHE_FILE)
    if os.path.exists(USED_SYMBOLS_FILE):
        os.remove(USED_SYMBOLS_FILE)

def load_used_symbols():
    if os.path.exists(USED_SYMBOLS_FILE):
        with open(USED_SYMBOLS_FILE, "r") as f:
            return json.load(f)
    return []

def save_used_symbol(symbol):
    used = load_used_symbols()
    used.append(symbol)
    with open(USED_SYMBOLS_FILE, "w") as f:
        json.dump(used[-6:], f)

def get_next_top_signal():
    if not os.path.exists(SIGNAL_CACHE_FILE):
        return None

    with open(SIGNAL_CACHE_FILE, "r") as f:
        signals = json.load(f)

    used = load_used_symbols()

    for signal in signals:
        if signal["symbol"] not in used:
            save_used_symbol(signal["symbol"])
            return signal
    return None

async def cache_top_signals():
    top_signals = await analyze_cryptos()
    with open(SIGNAL_CACHE_FILE, "w") as f:
        json.dump(top_signals, f)

def fnum(x):
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2-3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π"""
    return f"{x:.3f}".rstrip('0').rstrip('.') if '.' in f"{x:.3f}" else f"{x:.3f}"

async def send_signal_message(user_id, context):
    await cache_top_signals()
    signal = get_next_top_signal()

    if signal:
        price = float(signal["current_price"])
        target_price = round(price * 1.05, 6)
        stop_price = round(price * 0.97, 6)

        message = (
            f"*üöÄ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {signal['symbol']}*\n\n"
            f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* ${fnum(price)}\n"
            f"*–¶–µ–ª—å:* +5% ‚Üí ${fnum(target_price)}\n"
            f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* -3% ‚Üí ${fnum(stop_price)}\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* {fnum(signal['price_change_percentage_24h'])}%\n"
            f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {signal['probability']}%\n"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")]
        ])

        await context.bot.send_message(chat_id=user_id, text=message, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=user_id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.")

def schedule_daily_signal_check(app, owner_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø–æ –ú–°–ö
    """
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: app.create_task(send_signal_message(owner_id, app)),
                      trigger='cron', hour=8, minute=0, id='daily_signal')
    scheduler.start()
