import logging
from crypto_utils import get_all_coin_data
from crypto_list import TELEGRAM_WALLET_COIN_IDS

logger = logging.getLogger(__name__)

EXCLUDE_IDS = {"tether", "bitcoin", "toncoin", "binancecoin", "ethereum"}  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
ANALYSIS_LOG = []  # –ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è /debug_analysis

def evaluate_coin(coin):
    rsi = coin.get("rsi", 0)
    ma7 = coin.get("ma7", 0)
    price = coin.get("current_price", 0)
    change_24h = coin.get("price_change_percentage_24h", 0)
    symbol = coin.get("symbol", "?").upper()

    if not rsi or not ma7 or not price:
        log = f"‚ùå {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (RSI={rsi}, MA7={ma7}, Price={price})"
        ANALYSIS_LOG.append(log)
        logger.info(log)
        return -100, 0

    if change_24h < -5:
        log = f"‚ùå {symbol}: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á {change_24h:.2f}% ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–æ"
        ANALYSIS_LOG.append(log)
        logger.info(log)
        return -100, 0

    score = 0
    log_parts = []

    # RSI
    if 50 <= rsi <= 60:
        score += 2
        log_parts.append(f"‚úÖ RSI={rsi}")
    elif 45 <= rsi < 50 or 60 < rsi <= 65:
        score += 1
        log_parts.append(f"‚ö†Ô∏è RSI –Ω–∞ –≥—Ä–∞–Ω–∏: {rsi}")
    else:
        log_parts.append(f"üî∏ RSI –≤–Ω–µ –∑–æ–Ω—ã ({rsi})")

    # MA7
    if price > ma7:
        score += 2
        log_parts.append(f"‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ MA7 (P={price} > MA7={ma7})")
    else:
        log_parts.append(f"üî∏ –¶–µ–Ω–∞ –Ω–∏–∂–µ MA7 (P={price} < MA7={ma7})")

    # 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if change_24h > 5:
        score += 2
        log_parts.append(f"‚úÖ –†–æ—Å—Ç 24—á: {change_24h:.2f}%")
    elif change_24h > 2:
        score += 1
        log_parts.append(f"‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç 24—á: {change_24h:.2f}%")
    elif 0 > change_24h >= -5:
        if (rsi < 45 or price < ma7):
            log = f"‚ùå {symbol}: –ø–∞–¥–µ–Ω–∏–µ {change_24h:.2f}% –∏ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞"
            ANALYSIS_LOG.append(log)
            logger.info(log)
            return -100, 0
        else:
            log_parts.append(f"‚ö†Ô∏è –ü–∞–¥–µ–Ω–∏–µ {change_24h:.2f}%, –Ω–æ –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç")

    # –§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    base_prob = 45
    probability = min(90, base_prob + score * 7)
    probability = round(probability, 2)

    ANALYSIS_LOG.append(f"üîç {symbol}: " + "; ".join(log_parts) + f" ‚Üí score={score}, prob={probability}%")
    return score, probability

async def analyze_cryptos():
    global ANALYSIS_LOG
    ANALYSIS_LOG = []  # —Å–±—Ä–æ—Å –ª–æ–≥–æ–≤

    coin_ids = TELEGRAM_WALLET_COIN_IDS if isinstance(TELEGRAM_WALLET_COIN_IDS, list) else list(TELEGRAM_WALLET_COIN_IDS.keys())
    all_data = await get_all_coin_data(coin_ids)

    candidates = []

    for coin in all_data:
        coin_id = coin.get("id")
        if not coin_id or coin_id in EXCLUDE_IDS:
            continue

        score, probability = evaluate_coin(coin)

        if score < 2 or probability < 65:
            log = f"‚õî {coin['symbol'].upper()}: score={score}, prob={probability}% ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            ANALYSIS_LOG.append(log)
            continue

        coin["score"] = score
        coin["probability"] = probability
        candidates.append(coin)
        ANALYSIS_LOG.append(f"‚úÖ {coin['symbol'].upper()}: –î–û–ë–ê–í–õ–ï–ù–ê –≤ —Ç–æ–ø (score={score}, prob={probability}%)")

    candidates.sort(key=lambda x: x["probability"], reverse=True)

    top_signals = []
    for coin in candidates[:6]:
        signal = {
            "id": coin["id"],
            "symbol": coin["symbol"],
            "current_price": coin["current_price"],
            "price_change_percentage_24h": round(coin.get("price_change_percentage_24h", 0), 2),
            "probability": coin["probability"]
        }
        top_signals.append(signal)

    if not top_signals:
        logger.info("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.")

    return top_signals
