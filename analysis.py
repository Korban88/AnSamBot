import json
from crypto_utils import get_market_data
from crypto_list import MONITORED_SYMBOLS

USED_SYMBOLS_FILE = "used_symbols.json"

def load_used_symbols():
    try:
        with open(USED_SYMBOLS_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_used_symbols(symbols):
    with open(USED_SYMBOLS_FILE, "w") as f:
        json.dump(symbols[-6:], f)

async def get_top_signal():
    signals = []
    used = load_used_symbols()

    for symbol in MONITORED_SYMBOLS:
        if symbol in used:
            continue

        data = await get_market_data(symbol)
        if not data:
            continue

        price = data.get("price")
        change = data.get("change_24h")
        rsi = data.get("rsi")
        volume = data.get("volume_24h")
        volat = data.get("volatility")
        vol_growth = data.get("volume_growth")

        if not all([price, change, rsi, volume, volat, vol_growth]):
            continue

        # –ñ—ë—Å—Ç–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∑—Ä—ã–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
        if volume < 2_000_000:  # –Ω–∏–∑–∫–∏–π –æ–±—ä—ë–º
            continue
        if change < -4:  # —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ ‚Äî —Ä–∏—Å–∫
            continue
        if vol_growth < 20:  # –æ–±—ä—ë–º –Ω–µ —Ä–∞—Å—Ç—ë—Ç ‚Äî –Ω–µ—Ç –∏–º–ø—É–ª—å—Å–∞
            continue
        if volat < 4:  # –Ω–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            continue
        if rsi > 70:  # –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
            continue

        # –§–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏ –≤–∑—Ä—ã–≤–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        score = 0
        if 40 < rsi < 60: score += 20
        if vol_growth >= 50: score += 25
        if volat >= 6: score += 25
        if change >= 1: score += 10
        if 3 <= volat < 6: score += 10
        if rsi < 40: score += 5  # –æ—Ç—Å–∫–æ–∫ –≤–æ–∑–º–æ–∂–µ–Ω

        probability = min(90, 50 + score)

        if probability >= 65:
            signals.append({
                "symbol": symbol,
                "entry_price": round(price, 4),
                "target_price": round(price * 1.07, 4),
                "stop_loss": round(price * 0.94, 4),
                "probability": probability,
                "change_24h": round(change, 2),
                "volume_growth": round(vol_growth, 1),
                "volatility": round(volat, 2)
            })

    if not signals:
        print("‚ùå –ù–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–∞–º–ø.")
        return None

    signals.sort(key=lambda x: x["probability"], reverse=True)

    for signal in signals:
        if signal["symbol"] not in used:
            used.append(signal["symbol"])
            save_used_symbols(used)
            print(f"üì¢ –°–∏–≥–Ω–∞–ª: {signal['symbol']} ‚Üí –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {signal['probability']}%")
            return signal

    print("üîÅ –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–Ω–µ—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.")
    return None
