import logging
import json
import os
from datetime import datetime
import pytz

from crypto_utils import get_all_coin_data
from crypto_list import TELEGRAM_WALLET_COIN_IDS

# === NEW ===
from config import (
    ENABLE_FNG, ENABLE_NEWS,
    FNG_EXTREME_GREED, FNG_EXTREME_FEAR,
    MARKET_GUARD_BTC_DROP,
    NEGATIVE_TREND_7D_CUTOFF,
    PUMP_CUTOFF_24H,
    MIN_LIQUIDITY_USD, MAX_LIQUIDITY_USD
)
from sentiment_utils import get_fear_greed, get_news_sentiment  # NEW

logger = logging.getLogger(__name__)

EXCLUDE_IDS = {"tether", "bitcoin", "toncoin", "binancecoin", "ethereum"}
ANALYSIS_LOG = []
RISK_GUARD_FILE = "risk_guard.json"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# === NEW: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω —Ö–æ–¥–∏–º –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ ===
NEWS_MAX_PER_RUN = 5  # –±—ã–ª–æ 10 ‚Äî —É–º–µ–Ω—å—à–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 429

def safe_float(value, default=0.0):
    try:
        if value is None:
            return default
        return float(value)
    except (TypeError, ValueError):
        return default


def round_price(price):
    if price >= 1:
        return round(price, 3)
    elif price >= 0.01:
        return round(price, 4)
    else:
        return round(price, 6)


def format_volume(volume):
    if volume >= 1_000_000_000:
        return f"{round(volume / 1_000_000_000, 2)}B"
    elif volume >= 1_000_000:
        return f"{round(volume / 1_000_000, 2)}M"
    elif volume >= 1_000:
        return f"{round(volume / 1_000, 2)}K"
    else:
        return str(volume)


def get_deposit_advice(prob):
    if prob >= 85:
        return "üí∞ –°–æ–≤–µ—Ç: –º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å –¥–æ 35% –¥–µ–ø–æ–∑–∏—Ç–∞ (–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
    elif prob >= 75:
        return "üí∞ –°–æ–≤–µ—Ç: –Ω–µ –±–æ–ª–µ–µ 25% –¥–µ–ø–æ–∑–∏—Ç–∞ (—Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
    else:
        return "üí∞ –°–æ–≤–µ—Ç: –Ω–µ –±–æ–ª–µ–µ 15‚Äì20% –¥–µ–ø–æ–∑–∏—Ç–∞ (—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"


def growth_comment(change_24h):
    change_24h = round(change_24h, 2)
    if change_24h >= 10:
        return f"{change_24h}% üöÄ (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π, –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ–≥—Ä–µ–≤)"
    elif change_24h >= 5:
        return f"{change_24h}% ‚úÖ (—Ö–æ—Ä–æ—à–∏–π –∏–º–ø—É–ª—å—Å)"
    elif change_24h >= 2:
        return f"{change_24h}% (—É–º–µ—Ä–µ–Ω–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π)"
    else:
        return f"{change_24h}% ‚ö†Ô∏è (—Å–ª–∞–±—ã–π —Ä–æ—Å—Ç)"


def _read_risk_guard():
    """–ß–∏—Ç–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–æ–ø–æ–≤/–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if not os.path.exists(RISK_GUARD_FILE):
        return {"date": today, "stops": 0, "targets": 0}
    try:
        with open(RISK_GUARD_FILE, "r") as f:
            data = json.load(f)
        if data.get("date") != today:
            return {"date": today, "stops": 0, "targets": 0}
        return {"date": today, "stops": int(data.get("stops", 0)), "targets": int(data.get("targets", 0))}
    except Exception:
        return {"date": today, "stops": 0, "targets": 0}


def evaluate_coin(coin, fng=None, news_score=None):
    """
    –î–û–ü–û–õ–ù–ï–ù–û:
      - fng (dict) ‚Üí {'value': int, 'classification': str}
      - news_score (float|None) ‚Üí [-1..+1] –ø–æ CryptoPanic (–∞–≥—Ä–µ–≥–∞—Ç)
    """
    rsi = round(safe_float(coin.get("rsi")), 2)
    ma7 = round(safe_float(coin.get("ma7")), 4)
    price = safe_float(coin.get("current_price"))
    change_24h = round(safe_float(coin.get("price_change_percentage_24h")), 2)
    change_7d = safe_float(coin.get("price_change_percentage_7d"))
    if change_7d is not None:
        change_7d = round(change_7d, 2)
    volume = safe_float(coin.get("total_volume"))
    symbol = coin.get("symbol", "?").upper()

    reasons = []
    score = 0

    # –ñ—ë—Å—Ç–∫–∏–µ –æ—Ç—Å–µ–≤—ã
    if change_24h is not None and change_24h >= PUMP_CUTOFF_24H:
        return 0, 0, [f"‚õî –ü–µ—Ä–µ–≥—Ä–µ–≤ –∑–∞ 24—á ({change_24h}%) –≤—ã—à–µ {PUMP_CUTOFF_24H}% ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–æ"]
    if change_7d is not None and change_7d <= NEGATIVE_TREND_7D_CUTOFF:
        return 0, 0, reasons + [f"‚õî –î–∞—É–Ω—Ç—Ä–µ–Ω–¥ –∑–∞ 7–¥ {change_7d}% ‚â§ {NEGATIVE_TREND_7D_CUTOFF}% ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–æ"]
    if volume is not None and not (MIN_LIQUIDITY_USD <= volume <= MAX_LIQUIDITY_USD):
        return 0, 0, reasons + [f"‚õî –û–±—ä—ë–º {format_volume(volume)} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"]

    # RSI
    if 52 <= rsi <= 60:
        score += 1
        reasons.append(f"‚úì RSI {rsi} (–≤ –Ω–æ—Ä–º–µ)")
    else:
        reasons.append(f"‚úó RSI {rsi} (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 52‚Äì60)")

    # MA7
    if ma7 > 0 and price > ma7:
        score += 1
        reasons.append(f"‚úì –¶–µ–Ω–∞ –≤—ã—à–µ MA7 ({ma7})")
    else:
        reasons.append(f"‚úó –¶–µ–Ω–∞ –Ω–∏–∂–µ MA7 ({ma7})")

    # 24h
    if change_24h >= 2.5:
        score += 1
        reasons.append(f"‚úì –†–æ—Å—Ç –∑–∞ 24—á {growth_comment(change_24h)}")
    else:
        reasons.append(f"‚úó –†–æ—Å—Ç –∑–∞ 24—á {growth_comment(change_24h)}")

    # 7d
    if change_7d is not None:
        if change_7d > 0:
            score += 1
            reasons.append(f"‚úì –¢—Ä–µ–Ω–¥ –∑–∞ 7–¥ {change_7d}%")
        else:
            reasons.append(f"‚úó –¢—Ä–µ–Ω–¥ –∑–∞ 7–¥ {change_7d}% (–ø—Ä–æ—Å–∞–¥–∫–∞)")
    else:
        reasons.append("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ 7–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    # –û–±—ä—ë–º ‚Äî –¥–æ —ç—Ç–æ–≥–æ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    score += 1
    reasons.append(f"‚úì –û–±—ä—ë–º {format_volume(volume)}")

    # –ë–∞–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    rsi_weight = 1 if 52 <= rsi <= 60 else 0
    ma_weight = 1 if ma7 > 0 and price > ma7 else 0
    change_weight = min(change_24h / 6, 1) if change_24h > 0 else 0
    vol_weight = 1
    trend_weight = 1 if (change_7d is not None and change_7d > 0) else 0

    base_prob = 60
    prob = base_prob + (rsi_weight + ma_weight + change_weight + vol_weight + trend_weight) * 5

    # Fear & Greed
    if fng and isinstance(fng.get("value", None), int):
        fng_val = fng["value"]
        fng_cls = fng.get("classification", "")
        if fng_val >= FNG_EXTREME_GREED:
            prob -= 2
            reasons.append(f"üß≠ F&G: {fng_val} ({fng_cls}) ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ")
        elif fng_val <= FNG_EXTREME_FEAR:
            prob -= 2
            reasons.append(f"üß≠ F&G: {fng_val} ({fng_cls}) ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ")

    # –ù–æ–≤–æ—Å—Ç–∏
    if news_score is not None:
        if news_score > 0.2:
            prob = min(prob + 2, 92)
            reasons.append("üì∞ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω")
        elif news_score < -0.2:
            prob = max(prob - 3, 0)
            reasons.append("üì∞ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω")

    # –ú—è–≥–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ 7–¥
    if change_7d is not None:
        if change_7d >= 3:
            prob = min(prob + 1, 92)
        elif change_7d < 0:
            prob = max(prob - 1, 0)

    prob = round(min(prob, 92), 2)
    return score, prob, reasons


async def analyze_cryptos(fallback=True):
    global ANALYSIS_LOG
    ANALYSIS_LOG.clear()

    # Market-guard: BTC/ETH
    try:
        mk = await get_all_coin_data(["bitcoin", "ethereum"])
        mk_map = {c.get("id"): c for c in mk}
        btc_24h = safe_float(mk_map.get("bitcoin", {}).get("price_change_percentage_24h"))
        eth_24h = safe_float(mk_map.get("ethereum", {}).get("price_change_percentage_24h"))
        if btc_24h <= MARKET_GUARD_BTC_DROP:
            ANALYSIS_LOG.append(
                f"üõë –†—ã–Ω–æ–∫ —Å–ª–∞–±—ã–π: BTC {round(btc_24h,2)}%, ETH {round(eth_24h,2)}% –∑–∞ 24—á ‚Äî —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            )
            logger.info(ANALYSIS_LOG[-1])
            return []
        else:
            ANALYSIS_LOG.append(
                f"üü¢ –†—ã–Ω–æ–∫ –æ–∫: BTC {round(btc_24h,2)}%, ETH {round(eth_24h,2)}% ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑"
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä—ã–Ω–æ–∫ (BTC/ETH): {e}")

    # Fear & Greed
    fng = None
    if ENABLE_FNG:
        try:
            fng = await get_fear_greed()
            if fng:
                ANALYSIS_LOG.append(f"üß≠ Fear&Greed: {fng['value']} ({fng.get('classification','')})")
        except Exception as e:
            logger.warning(f"F&G –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    # Daily risk-guard
    rg = _read_risk_guard()
    if (rg["stops"] - rg["targets"] >= 2) or (rg["stops"] >= 3):
        ANALYSIS_LOG.append(
            f"üßØ Daily guard: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ –∑–∞–≤—Ç—Ä–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è —Å—Ç–æ–ø–æ–≤={rg['stops']}, –ø—Ä–æ—Ñ–∏—Ç–æ–≤={rg['targets']}"
        )
        logger.info(ANALYSIS_LOG[-1])
        return []

    # –î–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º
    try:
        coin_ids = list(TELEGRAM_WALLET_COIN_IDS.keys())
        all_data = await get_all_coin_data(coin_ids)
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ {len(all_data)} –º–æ–Ω–µ—Ç–∞–º –∏–∑ {len(coin_ids)}")
        missing_ids = set(coin_ids) - {c.get("id") for c in all_data}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

    candidates = []
    passed = 0
    no_data = len(missing_ids)
    excluded = 0

    news_calls = 0  # === NEW: —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å—Ö–æ–¥–∏–ª–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏

    for coin in all_data:
        coin_id = coin.get("id", "")
        if coin_id in EXCLUDE_IDS:
            excluded += 1
            continue

        # –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –¥–æ—Ä–æ–≥–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
        try:
            score, prob, reasons = evaluate_coin(coin, fng=fng, news_score=None)
        except Exception:
            continue

        # –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤ –∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ NEWS_MAX_PER_RUN
        news_score = None
        if ENABLE_NEWS and score >= 3 and news_calls < NEWS_MAX_PER_RUN:
            try:
                sym = (coin.get("symbol") or "").upper()
                news_score = await get_news_sentiment(sym or coin_id, ttl=3600)  # –∫—ç—à –¥–æ 1 —á–∞—Å–∞
                news_calls += 1
                # –ø–µ—Ä–µ—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π
                score, prob, reasons = evaluate_coin(coin, fng=fng, news_score=news_score)
                if news_score is not None:
                    ANALYSIS_LOG.append(f"üì∞ {sym or coin_id}: news_score={round(news_score,2)}")
            except Exception as e:
                logger.warning(f"–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {coin_id}: {e}")

        if score >= 4:
            passed += 1
            coin["score"] = score
            coin["probability"] = prob
            coin["reasons"] = reasons + [get_deposit_advice(prob)]
            coin["current_price"] = round_price(safe_float(coin.get("current_price")))
            coin["price_change_percentage_24h"] = round(safe_float(coin.get("price_change_percentage_24h")), 2)
            candidates.append(coin)

    candidates.sort(key=lambda x: (
        safe_float(x.get("probability")),
        safe_float(x.get("price_change_percentage_24h"))
    ), reverse=True)

    top_signals = []
    for coin in candidates[:6]:
        signal = {
            "id": coin["id"],
            "symbol": coin["symbol"],
            "current_price": coin["current_price"],
            "price_change_percentage_24h": coin["price_change_percentage_24h"],
            "probability": coin["probability"],
            "reasons": coin["reasons"],
            "safe": True
        }
        top_signals.append(signal)

    if not top_signals and fallback:
        all_data.sort(key=lambda x: safe_float(x.get("price_change_percentage_24h")), reverse=True)
        for fallback_coin in all_data:
            if fallback_coin.get("id") in EXCLUDE_IDS:
                continue
            price = round_price(safe_float(fallback_coin.get("current_price")))
            change = round(safe_float(fallback_coin.get("price_change_percentage_24h")), 2)
            volume = safe_float(fallback_coin.get("total_volume", 0))

            if price and change and volume >= 3_000_000:
                top_signals.append({
                    "id": fallback_coin["id"],
                    "symbol": fallback_coin["symbol"],
                    "current_price": price,
                    "price_change_percentage_24h": change,
                    "probability": 65.0,
                    "reasons": ["‚ö†Ô∏è Fallback: —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä (–Ω–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç)", get_deposit_advice(65)],
                    "safe": False
                })
                break

    ANALYSIS_LOG.append(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(all_data)} –∏–∑ {len(coin_ids)}, "
        f"–ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä {passed}, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö {no_data}, –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded}, "
        f"–Ω–µ –ø—Ä–æ—à–ª–æ {len(all_data) - passed - excluded}; news_calls={news_calls}/{NEWS_MAX_PER_RUN}"
    )

    return top_signals
