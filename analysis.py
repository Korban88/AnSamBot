import logging
from crypto_utils import get_all_coin_data
from crypto_list import TELEGRAM_WALLET_COIN_IDS

logger = logging.getLogger(__name__)

EXCLUDE_IDS = {"tether", "bitcoin", "toncoin", "binancecoin", "ethereum"}  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã

def evaluate_coin(coin):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (score, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞).
    """
    rsi = coin.get("rsi", 0)
    ma7 = coin.get("ma7", 0)
    price = coin.get("current_price", 0)
    change_24h = coin.get("price_change_percentage_24h", 0)

    symbol = coin.get("symbol", "?")

    if not rsi or not ma7 or not price:
        logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (rsi/ma7/price)")
        return -100, 0

    # üî¥ –ñ—ë—Å—Ç–∫–∏–π —Ñ–∏–ª—å—Ç—Ä: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
    if change_24h < -5:
        logger.info(f"‚ùå {symbol}: —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á = {change_24h}% (–æ—Ç–∫–ª.)")
        return -100, 0

    score = 0

    # RSI: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 50‚Äì60
    if 50 <= rsi <= 60:
        score += 2
    elif 45 <= rsi < 50 or 60 < rsi <= 65:
        score += 1
    else:
        logger.info(f"üî∏ {symbol}: RSI={rsi} –≤–Ω–µ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞")

    # MA7: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ
    if price > ma7:
        score += 2
    else:
        logger.info(f"üî∏ {symbol}: —Ü–µ–Ω–∞ –Ω–∏–∂–µ MA7 (price={price}, ma7={ma7})")

    # 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if change_24h > 5:
        score += 2
    elif change_24h > 2:
        score += 1
    elif 0 > change_24h >= -5:
        # –ú—è–≥–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ ‚Äî –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–æ—Å—Ç–∞
        if (rsi < 45 or price < ma7):
            logger.info(f"‚ùå {symbol}: –ø–∞–¥–µ–Ω–∏–µ {change_24h}% –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (RSI={rsi}, MA7={ma7})")
            return -100, 0
        else:
            logger.info(f"‚úÖ {symbol}: –ø–∞–¥–µ–Ω–∏–µ {change_24h}%, –Ω–æ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞")

    # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    probability = max(0, min(90, 60 + score * 5))
    return score, round(probability, 2)

async def analyze_cryptos():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-3 –º–æ–Ω–µ—Ç—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ Telegram Wallet.
    """
    coin_ids = TELEGRAM_WALLET_COIN_IDS if isinstance(TELEGRAM_WALLET_COIN_IDS, list) else list(TELEGRAM_WALLET_COIN_IDS.keys())
    all_data = await get_all_coin_data(coin_ids)

    candidates = []

    for coin in all_data:
        coin_id = coin.get("id")
        if not coin_id or coin_id in EXCLUDE_IDS:
            continue

        score, probability = evaluate_coin(coin)

        if score < 2 or probability < 65:
            logger.info(f"‚ùå –ú–æ–Ω–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {coin['symbol']}, score={score}, prob={probability}")
            continue

        coin["score"] = score
        coin["probability"] = probability
        candidates.append(coin)

    candidates.sort(key=lambda x: x["probability"], reverse=True)

    top_signals = []
    for coin in candidates[:3]:
        signal = {
            "id": coin["id"],
            "symbol": coin["symbol"],
            "current_price": coin["current_price"],
            "price_change_percentage_24h": round(coin.get("price_change_percentage_24h", 0), 2),
            "probability": coin["probability"]
        }
        top_signals.append(signal)

    if not top_signals:
        logger.info("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.")

    return top_signals
