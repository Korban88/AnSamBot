import json
from crypto_utils import get_market_data
from crypto_list import MONITORED_SYMBOLS

USED_SYMBOLS_FILE = "used_symbols.json"

def load_used_symbols():
    try:
        with open(USED_SYMBOLS_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_used_symbols(symbols):
    with open(USED_SYMBOLS_FILE, "w") as f:
        json.dump(symbols[-6:], f)

async def get_top_signal():
    signals = []
    used = load_used_symbols()

    for symbol in MONITORED_SYMBOLS:
        if symbol in used:
            continue

        data = await get_market_data(symbol)
        if not data:
            print(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å API")
            continue

        rsi = data.get("rsi")
        ma = data.get("ma")
        change = data.get("change_24h")
        price = data.get("price")

        if not all([rsi, ma, change, price]):
            print(f"‚ö†Ô∏è {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            continue

        # –°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä ‚Äî –æ—Ç—Å–µ–∏–≤–∞–µ–º —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        if change < -5:
            print(f"‚õî {symbol} –∏—Å–∫–ª—é—á—ë–Ω: –ø–∞–¥–µ–Ω–∏–µ {change:.2f}%")
            continue
        if rsi > 75 or rsi < 25:
            print(f"‚õî {symbol} –∏—Å–∫–ª—é—á—ë–Ω: RSI={rsi}")
            continue
        if ma > price * 1.05:
            print(f"‚õî {symbol} –∏—Å–∫–ª—é—á—ë–Ω: MA –≤—ã—à–µ —Ü–µ–Ω—ã (MA={ma}, P={price})")
            continue

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        base = 40
        rsi_score = max(0, 15 - abs(rsi - 50))  # –¥–æ 15
        trend_score = max(0, 25 - abs(ma - price) / price * 100)  # –¥–æ 25
        change_score = max(0, 20 - abs(change) * 2)  # –¥–æ 20

        probability = round(base + rsi_score + trend_score + change_score)
        probability = min(probability, 90)

        print(f"‚úÖ {symbol} –ø—Ä–æ—à—ë–ª –æ—Ç–±–æ—Ä: RSI={rsi}, MA={ma}, P={price}, Œî24h={change}, ‚Üí {probability}%")

        if probability >= 65:
            signals.append({
                "symbol": symbol,
                "entry_price": round(price, 4),
                "target_price": round(price * 1.05, 4),
                "stop_loss": round(price * 0.97, 4),
                "probability": probability,
                "change_24h": round(change, 2)
            })

    if not signals:
        print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        return None

    signals.sort(key=lambda x: x["probability"], reverse=True)

    # –ü–µ—Ä–≤–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–Ω–µ—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ
    for signal in signals:
        symbol = signal["symbol"]
        if symbol not in used:
            used.append(symbol)
            save_used_symbols(used)
            print(f"üì§ –°–∏–≥–Ω–∞–ª –≤—ã–±—Ä–∞–Ω: {symbol} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {signal['probability']}%")
            return signal

    print("üîÅ –í—Å–µ —Ç–æ–ø –º–æ–Ω–µ—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å")
    return None
