import logging
from crypto_utils import get_current_price, get_moving_average, get_rsi

logger = logging.getLogger("analysis")

async def analyze_coin(coin):
    coin_id = coin["id"]
    try:
        current_price = coin.get("current_price")
        if current_price is None:
            current_price = await get_current_price(coin_id)
        if current_price is None:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {coin_id}: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
            return None

        ma = await get_moving_average(coin_id)
        rsi = await get_rsi(coin_id)

        if ma is None and rsi is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç MA –∏ RSI –¥–ª—è {coin_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return None

        ma_score = 0
        if ma:
            ma_score = max(0, min(1, (current_price - ma) / ma))

        rsi_score = 0
        if rsi:
            if 50 < rsi < 70:
                rsi_score = (rsi - 50) / 20
            elif rsi >= 70:
                rsi_score = 0.1  # –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å

        change_24h = coin.get("price_change_percentage_24h", 0)
        if change_24h is None:
            change_24h = 0

        if change_24h < -3:
            logger.info(f"‚ùå {coin_id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á {change_24h:.2f}%")
            return None

        growth_score = max(0, min(1, change_24h / 5))  # —Ä–æ—Å—Ç –¥–æ 5% ‚Äî –º–∞–∫—Å–∏–º—É–º

        score = 0.5 * ma_score + 0.3 * rsi_score + 0.2 * growth_score
        probability = round(50 + score * 50)

        if probability < 65:
            return None

        return {
            "id": coin_id,
            "symbol": coin.get("symbol"),
            "name": coin.get("name"),
            "current_price": current_price,
            "ma": ma,
            "rsi": rsi,
            "change_24h": change_24h,
            "probability": probability
        }

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {coin_id}: {e}")
        return None

async def analyze_cryptos(coin_data):
    results = []
    for coin in coin_data:
        result = await analyze_coin(coin)
        if result:
            results.append(result)

    logger.info(f"üéØ –ú–æ–Ω–µ—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(results)}")

    sorted_results = sorted(results, key=lambda x: x["probability"], reverse=True)
    top_3 = sorted_results[:3]

    logger.info(f"üèÜ –û—Ç–æ–±—Ä–∞–Ω–æ top-3 –º–æ–Ω–µ—Ç: {[coin['id'] for coin in top_3]}")
    return top_3
