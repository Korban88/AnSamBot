import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import TELEGRAM_TOKEN, OWNER_ID
from crypto_list import get_all_cryptos
from analysis import analyze_cryptos
from signal_utils import get_next_signal_message, reset_signal_index
from tracking import start_tracking, stop_all_tracking

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–≥–Ω–∞–ª")
    cryptos = get_all_cryptos()
    results = await analyze_cryptos(cryptos)

    if not results:
        await message.answer("üö´ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    signal = get_next_signal_message(results)
    if signal:
        await message.answer(signal, reply_markup=keyboard)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.")

@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    stop_all_tracking()
    await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=keyboard)

async def send_daily_signal():
    await bot.wait_until_ready()
    while True:
        now = asyncio.get_event_loop().time()
        next_run = ((now // 86400) + 1) * 86400 + 8 * 3600  # 8:00 –ú–°–ö
        await asyncio.sleep(max(0, next_run - now))

        cryptos = get_all_cryptos()
        results = await analyze_cryptos(cryptos)

        if results:
            reset_signal_index()
            signal = get_next_signal_message(results)
            if signal:
                await bot.send_message(chat_id=OWNER_ID, text=signal, reply_markup=keyboard)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(send_daily_signal())
    executor.start_polling(dp, skip_updates=True)
