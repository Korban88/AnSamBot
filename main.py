import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import filters
from aiogram.types import CallbackQuery

from crypto_utils import get_top_coins
from tracking import CoinTracker
from scheduler import schedule_daily_signal

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

tracker = None
signal_index = 0
cached_signals = []

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)

@dp.message_handler(Text(equals="üü¢ –°—Ç–∞—Ä—Ç"))
async def activate_bot(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.")

@dp.message_handler(Text(equals="üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
async def send_signals(message: types.Message):
    global signal_index, cached_signals
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª'")
    await message.answer("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞...")

    try:
        if not cached_signals:
            cached_signals = get_top_coins()
            signal_index = 0

        if not cached_signals:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if signal_index >= len(cached_signals):
            await message.answer("–°–∏–≥–Ω–∞–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üü¢ –°—Ç–∞—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        coin = cached_signals[signal_index]
        signal_index += 1

        name = coin['id']
        price = coin['price']
        change = coin['change_24h']
        probability = coin['probability']
        target_price = coin['target_price']
        stop_loss_price = coin['stop_loss_price']
        risky = coin.get('risky', False)

        risk_note = "\n‚ö†Ô∏è <b>–ú–æ–Ω–µ—Ç–∞ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!</b>" if risky else ""

        text = (
            f"<b>üí∞ –°–∏–≥–Ω–∞–ª:</b>\n"
            f"–ú–æ–Ω–µ—Ç–∞: <b>{name}</b>\n"
            f"–¶–µ–Ω–∞: <b>{price} $</b>\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: <b>{change}%</b>\n"
            f"{'üü¢' if probability >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: <b>{probability}%</b>\n"
            f"üéØ –¶–µ–ª—å: <b>{target_price} $</b> (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: <b>{stop_loss_price} $</b> (-3.5%)"
            f"{risk_note}"
        )

        # üîò –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
        inline_kb = InlineKeyboardMarkup()
        inline_kb.add(InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{name}:{price}"))

        await message.answer(text, reply_markup=inline_kb)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query_handler(lambda c: c.data.startswith("track:"))
async def process_tracking_callback(callback_query: CallbackQuery):
    global tracker
    _, coin_id, entry_price = callback_query.data.split(":")
    entry_price = float(entry_price)

    tracker = CoinTracker(bot, callback_query.from_user.id)
    tracker.start_tracking(coin_id, entry_price)
    tracker.run()

    await callback_query.answer()
    await bot.send_message(
        callback_query.from_user.id,
        f"üëÅ –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ <b>{coin_id}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{entry_price} $</b>"
    )

@dp.message_handler(Text(equals="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
async def stop_tracking(message: types.Message):
    global tracker
    if tracker:
        tracker.stop_all_tracking()
        await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å.")

async def on_startup(dispatcher):
    schedule_daily_signal(dispatcher, bot, get_top_coins, user_id=USER_ID)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
