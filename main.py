import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from flask import Flask
from threading import Thread
from analysis import analyze_coin
from crypto_utils import get_top_coins
from tracker import CoinTracker

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
OWNER_ID = 347552741

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
tracker = CoinTracker(bot, OWNER_ID)

# === Flask (Railway Ping) ===
app = Flask("")

@app.route("/")
def home():
    return "Bot is alive!"

def run_web():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    thread = Thread(target=run_web)
    thread.start()

# === –°–∏–≥–Ω–∞–ª—ã ===
async def send_signal():
    top_coins = get_top_coins()
    logging.info(f"üîç –ê–Ω–∞–ª–∏–∑ {len(top_coins)} –º–æ–Ω–µ—Ç...")
    selected = []

    for coin in top_coins:
        result = analyze_coin(coin['id'])
        if result and result['probability'] >= 65:
            selected.append((coin, result))

    selected.sort(key=lambda x: x[1]['probability'], reverse=True)
    top_3 = selected[:3]

    if not top_3:
        await bot.send_message(OWNER_ID, "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    for coin, analysis in top_3:
        text = (
            f"üß† <b>–°–∏–≥–Ω–∞–ª:</b>\n"
            f"–ú–æ–Ω–µ—Ç–∞: <code>{coin['id']}</code>\n"
            f"–¶–µ–Ω–∞: {coin['current_price']} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['price_change_percentage_24h']:.2f}%\n"
            f"üü¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: <b>{analysis['probability']}%</b>\n"
            f"üéØ –¶–µ–ª—å: {round(coin['current_price'] * 1.05, 6)} $ (+5%)\n"
            f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {round(coin['current_price'] * 0.965, 6)} $ (-3.5%)"
        )
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin['id']}")
        )
        await bot.send_message(OWNER_ID, "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞...")
        await bot.send_message(OWNER_ID, text, reply_markup=keyboard)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = AsyncIOScheduler()
scheduler.add_job(send_signal, "cron", hour=8, minute=0)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if message.chat.id == OWNER_ID:
        await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=start_keyboard())

@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_signal(message: types.Message):
    if message.chat.id != OWNER_ID:
        return
    await send_signal()

@dp.message_handler(lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç")
async def manual_start(message: types.Message):
    if message.chat.id == OWNER_ID:
        await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=start_keyboard())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track:"))
async def handle_track(callback_query: CallbackQuery):
    coin_id = callback_query.data.split("track:")[1]
    tracker.track_coin(coin_id)
    await callback_query.answer(f"üü¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id} –∑–∞–ø—É—â–µ–Ω–æ")

@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    tracker.stop_all()
    await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def start_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
        InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="signal"),
    )
    keyboard.add(
        InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_all")
    )
    return keyboard

# === –°—Ç–∞—Ä—Ç ===
async def on_startup(_):
    logging.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")
    scheduler.start()
    asyncio.create_task(tracker.run())

if __name__ == "__main__":
    keep_alive()
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
