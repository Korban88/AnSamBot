import logging
import random
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
moscow = timezone('Europe/Moscow')

# üì© –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
async def send_daily_signal():
    chat_id = 347552741  # –¢–≤–æ–π Telegram ID

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
    coin = "BNB"
    current_price = 612.30
    target_price = round(current_price * 1.05, 2)
    stop_loss = round(current_price * 0.974, 2)  # -2.6% –∑–∞–ø–∞—Å
    probability = random.randint(76, 91)  # –§–∏–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞

    message = (
        "üìà –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª\n\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}$\n"
        f"–¶–µ–ª—å: +5% ‚Üí {target_price}$\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: BUY\n"
        f"–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∏–∂–µ: {stop_loss}$ (Stop Loss)\n\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {probability}%"
    )

    await bot.send_message(chat_id, message)

# –ó–∞–¥–∞—á–∞: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø–æ –ú–æ—Å–∫–≤–µ
scheduler.add_job(
    send_daily_signal,
    trigger='cron',
    hour=8,
    minute=0,
    timezone=moscow
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã.")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
