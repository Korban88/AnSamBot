import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import analyze_tokens
import os

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# ======= –ö–ù–û–ü–ö–ò =======
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
start_kb.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))

# ======= –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =======
async def send_signal(chat_id):
    try:
        result = analyze_tokens()
        if not result:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É.")
            return

        msg = (
            f"üìà *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã:*\n\n"
            f"*–ú–æ–Ω–µ—Ç–∞:* `{result['id'].upper()}`\n"
            f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* `${result['price']}`\n"
            f"*–¶–µ–ª—å +5%:* `${round(result['price'] * 1.05, 4)}`\n"
            f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* `${round(result['price'] * 0.96, 4)}`\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* `{result['change_24h']}%`\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥:* `{result['change_7d']}%`\n"
            f"*–û–±—ä—ë–º:* `${result['volume']}`"
        )
        await bot.send_message(chat_id, msg, parse_mode="Markdown")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ send_signal()")
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{str(e)}")

# ======= –ö–û–ú–ê–ù–î–ê /start =======
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=start_kb)

# ======= –ö–û–ú–ê–ù–î–ê /test =======
@dp.message_handler(commands=['test'])
async def test_command(message: types.Message):
    await message.answer("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:")
    await send_signal(message.chat.id)

# ======= –ö–ù–û–ü–ö–ê "–°—Ç–∞—Ä—Ç" =======
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.")

# ======= –ö–ù–û–ü–ö–ê "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª" =======
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_signal_button(message: types.Message):
    await send_signal(message.chat.id)

# ======= –ï–ñ–ï–î–ù–ï–í–ù–´–ô –°–ò–ì–ù–ê–õ =======
async def scheduled_signal():
