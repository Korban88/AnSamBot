import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_USER_ID
from keyboards import get_main_keyboard
from signal_utils import get_next_signal_message, reset_signal_index
from tracking import start_tracking, stop_all_tracking, tracking_loop

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    if str(message.from_user.id) != str(TELEGRAM_USER_ID):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    keyboard = get_main_keyboard()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    signal_message, coin_id, entry_price = await get_next_signal_message()
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin_id}:{entry_price}")
    keyboard.add(button)
    await message.answer(signal_message, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('track:'))
async def handle_track_callback(callback_query: types.CallbackQuery):
    _, coin_id, entry_price = callback_query.data.split(':')
    await start_tracking(coin_id, float(entry_price), bot)
    await callback_query.answer(f"‚è± –ú–æ–Ω–µ—Ç–∞ {coin_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")


@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_stop_tracking(message: types.Message):
    await stop_all_tracking(bot)
    await message.answer("üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def handle_reset_signal_index(message: types.Message):
    reset_signal_index()
    await message.answer("‚ôªÔ∏è –ò–Ω–¥–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ–π–¥—É—Ç —Å–Ω–∞—á–∞–ª–∞.")


if __name__ == '__main__':
    logger.info("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
    asyncio.create_task(tracking_loop(bot))
    executor.start_polling(dp, skip_updates=True)
