import asyncio
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes

from config import TELEGRAM_BOT_TOKEN, OWNER_ID
from analysis import analyze_cryptos
from tracking import start_tracking_coin, stop_all_trackings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == "get_signal":
        await get_signal(update, context)
    elif query.data == "stop_tracking":
        stop_all_trackings()
        await query.message.reply_text("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def get_signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    top_coins = analyze_cryptos(disable_filters=True)
    if not top_coins:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return
    coin = top_coins[0]
    keyboard = [[InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{coin['id']}")]]
    message = (
        f"*üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {coin['id'].capitalize()}*\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {coin['price']}\n"
        f"24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {coin['change_24h']}%\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['growth_probability']}%\n"
        f"–¶–µ–ª—å: +{coin['target_percent']}%\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: {coin['stop_loss_percent']}%"
    )
    await update.callback_query.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="MarkdownV2"
    )

async def track_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data.startswith("track_"):
        coin_id = query.data.split("_")[1]
        start_tracking_coin(coin_id, context.bot)
        await query.message.reply_text(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id} –∑–∞–ø—É—â–µ–Ω–æ.")

async def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(get_signal|stop_tracking)$"))
    app.add_handler(CallbackQueryHandler(track_button_handler, pattern="^track_"))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(main())
