import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from signal_generator import generate_signal
from tracker import CoinTracker
from config import BOT_TOKEN, USER_ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
tracker = CoinTracker(bot, USER_ID)

# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add("üìà –ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.chat.id != USER_ID:
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.message_handler(lambda message: message.text == "üìà –ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_more_signal(message: types.Message):
    if message.chat.id != USER_ID:
        return
    logging.info("üîò –ó–∞–ø—Ä–æ—Å —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    result = generate_signal()
    if not result:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É.")
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{result['entry_price']}`\n"
        f"–¶–µ–ª—å: `{result['target_price']}` (+5%)\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{result['stop_loss']}`\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*\n"
        f"_24—á: {result['change_24h']}% | RSI: {result['rsi']} | MA7: {result['ma7']} | MA20: {result['ma20']}_"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{result['symbol']}"))

    await bot.send_message(USER_ID, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track_"))
async def handle_track_button(callback_query: types.CallbackQuery):
    coin_symbol = callback_query.data.split("_", 1)[1]
    logging.info(f"üü° –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã: {coin_symbol}")
    await tracker.track_coin(coin_symbol)
    await bot.answer_callback_query(callback_query.id, text=f"–ú–æ–Ω–µ—Ç–∞ {coin_symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é!")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
async def send_daily_signal():
    logging.info("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ 8:00")
    result = generate_signal()
    if not result:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É.")
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{result['entry_price']}`\n"
        f"–¶–µ–ª—å: `{result['target_price']}` (+5%)\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{result['stop_loss']}`\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*\n"
        f"_24—á: {result['change_24h']}% | RSI: {result['rsi']} | MA7: {result['ma7']} | MA20: {result['ma20']}_"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{result['symbol']}"))

    await bot.send_message(USER_ID, text, reply_markup=keyboard)

async def on_startup(dp):
    scheduler.add_job(send_daily_signal, trigger='cron', hour=8, minute=0)
    scheduler.start()
    logging.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")

if __name__ == '__main__':
    from flask import Flask
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "Bot is running!"

    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
