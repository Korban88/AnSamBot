import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741  # –¢–æ–ª—å–∫–æ –¥–ª—è –ê—Ä—Ç—É—Ä–∞

# === –ë–ê–ó–ê ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ö–ù–û–ü–ö–ê "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" ===
def get_error_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì© –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_issue"))
    return kb

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–†–¢–ê ===
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    if message.from_user.id == USER_ID:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\nAnSam Bot –ø–æ–¥–∫–ª—é—á—ë–Ω. –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–¥—ë—Ç –≤ 12:00 –ø–æ –ú–æ—Å–∫–≤–µ.",
            reply_markup=get_error_button()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" ===
@dp.callback_query_handler(lambda c: c.data == "report_issue")
async def process_callback_report(callback_query: types.CallbackQuery):
    await bot.send_message(USER_ID, "üö® –ü—Ä–∏–Ω—è—Ç–æ. –¢—ã —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ. –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—é.")
    await bot.answer_callback_query(callback_query.id)

# === –û–¢–ü–†–ê–í–ö–ê –°–ò–ì–ù–ê–õ–ê ===
async def daily_signal():
    today = datetime.date.today()
    await bot.send_message(USER_ID,
        f"üéØ –°–∏–≥–Ω–∞–ª –æ—Ç AnSam Bot –Ω–∞ {today}:\n"
        f"–ú–æ–Ω–µ—Ç–∞: TON\n"
        f"–í—Ö–æ–¥: $6.00\n"
        f"–¶–µ–ª—å: $6.30 (+5%)\n"
        f"–°—Ç–æ–ø: $5.80",
        reply_markup=get_error_button()
    )

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
async def scheduler():
    while True:
        now = datetime.datetime.now()
        if now.hour == 12 and now.minute == 0:
            await daily_signal()
            await asyncio.sleep(60)
        await asyncio.sleep(20)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
