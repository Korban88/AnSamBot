import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import analyze_tokens
import asyncio

# üîê –¢–æ–∫–µ–Ω –∏ ID
BOT_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
USER_ID = 347552741

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# üì¶ –°–ª–æ–≤–∞—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
watched_tokens = {}  # user_id: {'token': 'arbitrum', 'start_price': 1.12}

# üéõÔ∏è –ö–Ω–æ–ø–∫–∏
keyboard = InlineKeyboardMarkup(row_width=1)
keyboard.add(
    InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
    InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data="watch_token")
)


# üß† –§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
def calculate_growth_probability(coin):
    score = coin["score"]
    prob = min(95, max(50, 65 + score * 5))  # –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞ –±–∞–∑–µ score
    return prob


# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(chat_id):
    try:
        result = analyze_tokens()
        if not result:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
            return

        prob = calculate_growth_probability(result)
        message = (
            f"üì° –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç:\n\n"
            f"üîπ –ú–æ–Ω–µ—Ç–∞: {result['id']}\n"
            f"üíµ –¶–µ–Ω–∞: ${result['price']}\n"
            f"üìà 24—á: {result['change_24h']}%\n"
            f"üìä 7–¥: {result['change_7d']}%\n"
            f"üí∞ –û–±—ä—ë–º: ${result['volume']}\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {prob}%\n\n"
            f"üéØ –¶–µ–ª—å: +5%\n‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: -3%"
        )

        await bot.send_message(chat_id, message, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_signal(): {e}")
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{e}")


# ‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª
async def scheduled_signal():
    await send_signal(USER_ID)


# üì• –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 8:00 –ø–æ –ú–°–ö.", reply_markup=keyboard)


# üß™ –ö–æ–º–∞–Ω–¥–∞ /test
@dp.message_handler(commands=['test'])
async def test_command(message: types.Message):
    await message.answer("‚úèÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:")
    await send_signal(message.chat.id)


# üß≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if callback_query.data == "more_signal":
        await send_signal(callback_query.message.chat.id)

    elif callback_query.data == "watch_token":
        result = analyze_tokens()
        if result:
            watched_tokens[user_id] = {
                "token": result["id"],
                "start_price": result["price"]
            }
            await bot.send_message(user_id, f"üîî –°–ª–µ–¥–∏–º –∑–∞ {result['id']} –æ—Ç ${result['price']}. –£–≤–µ–¥–æ–º–ª—é –ø—Ä–∏ +3.5%.")

        else:
            await bot.send_message(user_id, "‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
async def check_watched_tokens():
    for user_id, token_data in list(watched_tokens.items()):
        token = token_data["token"]
        start_price = token_data["start_price"]

        result = analyze_tokens()
        if result and result["id"] == token:
            current_price = result["price"]
            if current_price >= start_price * 1.035:
                await bot.send_message(
                    user_id,
                    f"üöÄ {token} –≤—ã—Ä–æ—Å –Ω–∞ 3.5%!\nüí∞ –°–µ–π—á–∞—Å: ${current_price}"
                )
                del watched_tokens[user_id]


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    scheduler.add_job(scheduled_signal, trigger='cron', hour=8, minute=0)
    scheduler.add_job(check_watched_tokens, trigger='interval', minutes=10)
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
