import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import get_top_ton_wallet_coins
from tracking import start_tracking

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_extra_signal(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        text = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {coin['price']} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10}%\n"
            f"üéØ –¶–µ–ª—å: +5%\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: -3%"
        )
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º.")

# –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"
@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def track_coin(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        await message.answer(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {coin['id']} —Å —Ü–µ–Ω—ã {coin['price']} $ –Ω–∞ 12 —á–∞—Å–æ–≤...")
        await start_tracking(message, coin['id'], coin['price'])
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

# –ü–ª–∞–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 8:00
async def scheduled_signal():
    coin = get_top_ton_wallet_coins()
    if coin:
        text = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {coin['price']} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10}%\n"
            f"üéØ –¶–µ–ª—å: +5%\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: -3%"
        )
        await bot.send_message(USER_ID, text)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(_):
    scheduler.add_job(scheduled_signal, "cron", hour=8, minute=0)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
