import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from datetime import datetime
from crypto_utils import analyze_tokens  # —Ç–≤–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
from ton_tokens import get_ton_wallet_tokens  # —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –º–æ–Ω–µ—Ç

API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
moscow = timezone('Europe/Moscow')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(chat_id):
    coins = get_ton_wallet_tokens()
    signal = await analyze_tokens(coins)

    if signal:
        coin, current_price, target_price, stop_loss = signal
        probability = random.randint(76, 91)

        message = (
            "üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É\n\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin.upper()}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}$\n"
            f"–¶–µ–ª—å: +5% ‚Üí {target_price}$\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: BUY\n"
            f"–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∏–∂–µ: {stop_loss}$ (Stop Loss)\n\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {probability}%"
        )
    else:
        message = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞."

    await bot.send_message(chat_id, message, reply_markup=keyboard)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
async def scheduled_signal():
    chat_id = 347552741  # —Ç–≤–æ–π ID
    await send_signal(chat_id)

scheduler.add_job(scheduled_signal, trigger='cron', hour=8, minute=0, timezone=moscow)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª.", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞: –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_signal_handler(message: types.Message):
    await send_signal(message.chat.id)

# –ö–æ–º–∞–Ω–¥–∞ /test ‚Äî –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
@dp.message_handler(commands=['test'])
async def test_handler(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:")
    await send_signal(message.chat.id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
