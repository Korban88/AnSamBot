import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio

from config import BOT_TOKEN, USER_ID
from signal_generator import generate_signal
from coin_tracker import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
tracker = CoinTracker(bot, USER_ID)

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(
    KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"),
    KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
)
keyboard.add(
    KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.message_handler(lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥–∏ —Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ú–°–ö.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_signal_request(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    result = generate_signal()
    if not result:
        await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ —Ä—ã–Ω–æ–∫ –∂–∏–≤—ë—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    signal_text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
        f"üîπ –°–∏–º–≤–æ–ª: `{result['symbol']}`\n"
        f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{result['price']} USDT*\n"
        f"üéØ –¶–µ–ª—å (+5%): *{result['target']}*\n"
        f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: *{result['stop']}*\n"
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{result['change_24h']}%*\n"
        f"üìà RSI: *{result['rsi']}*\n"
        f"üìâ MA7: *{result['ma7']}*, MA20: *{result['ma20']}*\n"
        f"üß† –û—Ü–µ–Ω–∫–∞: *{result['score']}*, –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*"
    )

    inline_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['symbol']}:{result['price']}")
    )

    await message.answer(signal_text, reply_markup=inline_kb)

# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    await tracker.stop_all_tracking()
    await message.answer("üîï –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"
@dp.callback_query_handler(lambda call: call.data.startswith("track:"))
async def handle_track_callback(call: types.CallbackQuery):
    if call.from_user.id != USER_ID:
        return
    _, symbol, price = call.data.split(":")
    await tracker.track_coin(symbol, float(price))
    await call.answer(f"üü° –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {symbol} –æ—Ç {price} USDT", show_alert=True)

# –ü–ª–∞–Ω–æ–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_daily_signal():
    result = generate_signal()
    if result:
        signal_text = (
            f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
            f"üîπ –°–∏–º–≤–æ–ª: `{result['symbol']}`\n"
            f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{result['price']} USDT*\n"
            f"üéØ –¶–µ–ª—å (+5%): *{result['target']}*\n"
            f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: *{result['stop']}*\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{result['change_24h']}%*\n"
            f"üìà RSI: *{result['rsi']}*\n"
            f"üìâ MA7: *{result['ma7']}*, MA20: *{result['ma20']}*\n"
            f"üß† –û—Ü–µ–Ω–∫–∞: *{result['score']}*, –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*"
        )

        inline_kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['symbol']}:{result['price']}")
        )

        await bot.send_message(USER_ID, signal_text, reply_markup=inline_kb)
    else:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –Ω–µ—Ç. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ú–°–ö
async def on_startup(dp):
    scheduler.add_job(send_daily_signal, 'cron', hour=8, minute=0, timezone="Europe/Moscow")
    scheduler.start()
    minutes_until_next_signal = (datetime.combine(datetime.now(), datetime.min.time()) + timedelta(days=1, hours=8) - datetime.now()).seconds // 60
    logger.info(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {minutes_until_next_signal} –º–∏–Ω—É—Ç")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
