import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from analysis import analyze_cryptos
from signal_utils import get_next_signal_message, reset_signal_index
from config import TELEGRAM_TOKEN, OWNER_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# ==== –ö–ù–û–ü–ö–ò ====
start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="get_another_signal")]
])

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====
@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=start_keyboard)
    reset_signal_index(message.from_user.id)

@dp.callback_query_handler(lambda c: c.data == "get_another_signal")
async def handle_get_another_signal(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    try:
        top_cryptos = await analyze_cryptos()

        if not top_cryptos:
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        signal = get_next_signal_message(user_id, top_cryptos)

        if signal:
            await bot.send_message(user_id, signal["text"], reply_markup=signal["keyboard"], parse_mode="MarkdownV2")
        else:
            await bot.send_message(user_id, "‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        await bot.send_message(user_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞.")

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
