import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from analysis import get_top_signals
from tracking import CoinTracker
from config import TELEGRAM_TOKEN, OWNER_ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä CoinTracker
coin_tracker = CoinTracker()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup(row_width=2)
main_keyboard.add(
    InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
    InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
)
main_keyboard.add(
    InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    keyboard = main_keyboard
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\.",
        reply_markup=keyboard,
    )

@dp.callback_query_handler(lambda c: c.data == "start")
async def process_start(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@dp.callback_query_handler(lambda c: c.data == "more_signal")
async def more_signal(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    signals = await get_top_signals()
    if not signals:
        await callback_query.message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–π—á–∞—Å.")
        return

    signal = signals[0]  # –ü–µ—Ä–≤—ã–π –∏–∑ —Ç–æ–ø–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['id']}"),
        InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
        InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )

    text = (
        f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {signal.get('symbol', '-')}
"
        f"üíé –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \${signal.get('price', 0)}
"
        f"üéØ –¶–µ–ª—å (+5%): \${signal.get('target_price', 0)}
"
        f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å (‚àí3%): \${signal.get('stop_loss', 0)}
"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal.get('probability', 0)}%*"
    )
    await callback_query.message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_coin(callback_query: types.CallbackQuery):
    coin_id = callback_query.data.split("_")[1]
    await bot.answer_callback_query(callback_query.id)
    await coin_tracker.track_current(bot, coin_id, OWNER_ID)
    await callback_query.message.answer(f"–ú–æ–Ω–µ—Ç–∞ {coin_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –£–≤–µ–¥–æ–º–∏–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ +3.5% –∏–ª–∏ +5%.")

@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    coin_tracker.stop_all()
    await callback_query.message.answer("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
scheduler.add_job(coin_tracker.run, "interval", minutes=10)
scheduler.add_job(lambda: asyncio.create_task(daily_signal()), "cron", hour=8, minute=0)
scheduler.start()

async def daily_signal():
    signals = await get_top_signals()
    if not signals:
        return

    signal = signals[0]  # –¢–æ–ø-1 –º–æ–Ω–µ—Ç–∞
    text = (
        f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {signal.get('symbol', '-')}
"
        f"üíé –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \${signal.get('price', 0)}
"
        f"üéØ –¶–µ–ª—å (+5%): \${signal.get('target_price', 0)}
"
        f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å (‚àí3%): \${signal.get('stop_loss', 0)}
"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal.get('probability', 0)}%*"
    )

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['id']}"),
        InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
        InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )
    await bot.send_message(OWNER_ID, text, reply_markup=keyboard)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
