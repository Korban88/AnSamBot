import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from crypto_utils import get_top_ton_wallet_coins
from tracking import start_tracking, stop_all_trackings

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
ADMIN_ID = 347552741

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
logging.basicConfig(level=logging.INFO)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
user_coin_index = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é ===
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    types.KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"),
    types.KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"),
    types.KeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"),
    types.KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
)

# === /start ===
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_coin_index[message.from_user.id] = 0
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.",
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç")
async def start_again(message: types.Message):
    user_coin_index[message.from_user.id] = 0
    await message.answer(
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.",
        reply_markup=main_menu
    )

# === –ö–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª' ===
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_coin_index:
        user_coin_index[user_id] = 0

    coins = get_top_ton_wallet_coins(top_n=3)
    if not coins:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º.")
        return

    index = user_coin_index[user_id] % len(coins)
    coin = coins[index]
    user_coin_index[user_id] += 1

    price = coin['price']
    target_price = round(price * 1.05, 4)
    stop_loss_price = round(price * 0.965, 4)

    if coin['probability'] >= 70:
        emoji = "üü¢"
    elif coin['probability'] >= 50:
        emoji = "üü°"
    else:
        emoji = "üî¥"

    text = (
        f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
        f"–¶–µ–Ω–∞: {price} $\n"
        f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
        f"{emoji} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['probability']}%\n"
        f"üéØ –¶–µ–ª—å: {target_price} $ (+5%)\n"
        f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price} $ (-3.5%)"
    )
    await message.answer(text)

# === –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π ===
@dp.message_handler(lambda message: message.text == "üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def handle_track_coin(message: types.Message):
    coins = get_top_ton_wallet_coins(top_n=1)
    if coins:
        coin = coins[0]
        await start_tracking(bot, message.from_user.id, coin['id'], coin['price'])
        await message.answer(
            f"üõ∞ –ú–æ–Ω–µ—Ç–∞ {coin['id']} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –£–≤–µ–¥–æ–º–∏–º –ø—Ä–∏ +3.5%, +5% –∏–ª–∏ –ø–æ –∏—Ç–æ–≥–∞–º 12—á."
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# === –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ===
@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_stop_tracking(message: types.Message):
    stop_all_trackings(message.from_user.id)
    await message.answer("‚ùå –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ 8:00 ===
async def scheduled_signal():
    coins = get_top_ton_wallet_coins(top_n=1)
    if coins:
        coin = coins[0]
        price = coin['price']
        target_price = round(price * 1.05, 4)
        stop_loss_price = round(price * 0.965, 4)
        emoji = "üü¢" if coin['probability'] >= 70 else "üî¥"

        text = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {price} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"{emoji} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['probability']}%\n"
            f"üéØ –¶–µ–ª—å: {target_price} $ (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price} $ (-3.5%)"
        )
        await bot.send_message(ADMIN_ID, text)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler.add_job(scheduled_signal, "cron", hour=8, minute=0)
async def on_startup(dp):
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
