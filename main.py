import os
import json
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from analysis import analyze_cryptos
from tracking import start_tracking_coin, stop_all_tracking
from config import TELEGRAM_TOKEN, OWNER_ID

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def escape_markdown_v2(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in str(text))

# –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
async def get_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    coins = analyze_cryptos()

    if not coins or coins[0]["id"] == "diagnostics":
        await update.callback_query.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    coin = coins[0]
    price = round(coin["price"], 4)
    target_price = round(price * 1.05, 4)
    stop_loss = round(price * 0.97, 4)

    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin['id']}")]
    ]

    message = (
        f"*üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {escape_markdown_v2(coin['id'].capitalize())}*\n"
        f"–¶–µ–Ω–∞: {escape_markdown_v2(price)}\n"
        f"24—á: {escape_markdown_v2(coin['change_24h'])}%\n"
        f"RSI: {escape_markdown_v2(coin['rsi'])} \\| MA: {escape_markdown_v2(coin['ma'])}\n"
        f"üéØ –¶–µ–ª—å: {escape_markdown_v2(target_price)}\n"
        f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {escape_markdown_v2(stop_loss)}\n"
        f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{escape_markdown_v2(coin['probability'])}%*"
    )

    await update.callback_query.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="MarkdownV2"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        await get_signal(update, context)
    elif query.data == "stop_tracking":
        await stop_all_tracking(context)
        await query.message.reply_text("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    elif query.data.startswith("track:"):
        coin_id = query.data.split(":")[1]
        await start_tracking_coin(coin_id, context, OWNER_ID)
        await query.message.reply_text(f"üì° –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
