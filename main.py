import logging
from aiogram import Bot, Dispatcher, executor, types
from config import TELEGRAM_TOKEN, OWNER_ID
from signal_utils import get_next_signal_message, reset_signal_index
from tracking import stop_all_trackings

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\\!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    try:
        signal_message, coin_id, entry_price = await get_next_signal_message()
        await message.answer(signal_message, reply_markup=signal_keyboard(coin_id, entry_price))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã.")

@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_stop_tracking(message: types.Message):
    stop_all_trackings()
    await message.answer("‚ùå –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    await send_welcome(message)

@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def handle_track_callback(callback_query: types.CallbackQuery):
    try:
        _, coin_id, entry_price = callback_query.data.split("_")
        from tracking import start_tracking
        await start_tracking(bot, coin_id, float(entry_price), OWNER_ID)
        await callback_query.answer("–ú–æ–Ω–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback track: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
    keyboard.add("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    keyboard.add("–°—Ç–∞—Ä—Ç")
    return keyboard

def signal_keyboard(coin_id, entry_price):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text="–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π",
        callback_data=f"track_{coin_id}_{entry_price}"
    ))
    return keyboard

if __name__ == '__main__':
    logging.info("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
    executor.start_polling(dp, skip_updates=True)
