import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from config import TELEGRAM_BOT_TOKEN, OWNER_ID
from analysis import analyze_cryptos
from tracking import start_tracking_coin, stop_all_tracking

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_signal_index = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        user_id = query.from_user.id
        result = analyze_cryptos()

        if not result:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
            return

        index = user_signal_index.get(user_id, 0)
        if index >= len(result):
            index = 0
        coin = result[index]
        user_signal_index[user_id] = index + 1

        message = (
            f"üìä –°–∏–≥–Ω–∞–ª: {coin['name'].capitalize()}\n"
            f"–¶–µ–Ω–∞: ${coin['price']}\n"
            f"–¶–µ–ª—å: +5% ‚Üí ${coin['target_price']}\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: ${coin['stop_loss']}\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"RSI: {coin['rsi']}, MA: {coin['ma']}\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['growth_probability']}%"
        )
        keyboard = [[InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{coin['id']}")]]
        await query.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "stop_tracking":
        stop_all_tracking()
        await query.message.reply_text("‚õîÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    elif query.data.startswith("track_"):
        coin_id = query.data.split("_", 1)[1]
        await query.message.reply_text(f"üëÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id} –∑–∞–ø—É—â–µ–Ω–æ.")
        await start_tracking_coin(coin_id, context.bot)

async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
