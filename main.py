import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from crypto_utils import get_top_ton_wallet_coins
from tracking import start_tracking

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def more_signal(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        msg = f"""üí∞ –°–∏–≥–Ω–∞–ª:

–ú–æ–Ω–µ—Ç–∞: {coin['id']}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${coin['price']}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['change_24h']}%
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {coin['change_7d']}%
–û–±—ä—ë–º: ${coin['volume']}
–¶–µ–ª—å: +5% -> ${round(coin['price'] * 1.05, 4)}
–°—Ç–æ–ø-–ª–æ—Å—Å: ${round(coin['price'] * 0.965, 4)}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {round(min(97, coin['score'] * 12 + 40), 1)}%
"""
        await message.answer(msg)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def track_coin(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        await message.answer(f"–ó–∞–ø—É—Å–∫–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã {coin['id']} –ø–æ —Ü–µ–Ω–µ ${coin['price']}.")
        await start_tracking(bot, USER_ID, coin)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def scheduled_signal():
    coin = get_top_ton_wallet_coins()
    if coin:
        msg = f"""üí∞ –°–∏–≥–Ω–∞–ª:

–ú–æ–Ω–µ—Ç–∞: {coin['id']}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${coin['price']}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['change_24h']}%
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {coin['change_7d']}%
–û–±—ä—ë–º: ${coin['volume']}
–¶–µ–ª—å: +5% -> ${round(coin['price'] * 1.05, 4)}
–°—Ç–æ–ø-–ª–æ—Å—Å: ${round(coin['price'] * 0.965, 4)}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {round(min(97, coin['score'] * 12 + 40), 1)}%
"""
        await bot.send_message(USER_ID, msg)

async def on_startup(_):
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    scheduler.add_job(scheduled_signal, 'cron', hour=8, minute=0)
    scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
