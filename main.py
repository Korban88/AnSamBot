import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import get_top_ton_wallet_coins
from tracking import start_tracking
import asyncio

API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# --- –ö–Ω–æ–ø–∫–∏ ---
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def manual_signal(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        price = coin['price']
        goal_price = round(price * 1.05, 4)
        stop_price = round(price * 0.965, 4)
        signal = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {price} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10 + 50}%\n"
            f"üéØ –¶–µ–ª—å: {goal_price} $ (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_price} $ (-3.5%)"
        )
        await message.answer(signal)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(lambda message: message.text == "üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def track_button(message: types.Message):
    coin = get_top_ton_wallet_coins()
    if coin:
        await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π {coin['id']} –ø–æ —Ü–µ–Ω–µ {coin['price']} $")
        await start_tracking(bot, USER_ID, coin['id'], coin['price'])
    else:
        await message.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def scheduled_signal():
    coin = get_top_ton_wallet_coins()
    if coin:
        price = coin['price']
        goal_price = round(price * 1.05, 4)
        stop_price = round(price * 0.965, 4)
        signal = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {price} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10 + 50}%\n"
            f"üéØ –¶–µ–ª—å: {goal_price} $ (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_price} $ (-3.5%)"
        )
        await bot.send_message(USER_ID, signal)

scheduler.add_job(scheduled_signal, trigger='cron', hour=8, minute=0, timezone='Europe/Moscow')

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
