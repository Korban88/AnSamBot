import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from tracker import CoinTracker
from signal_generator import generate_signal
from keyboard import main_keyboard

API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot)
tracker = CoinTracker(bot, USER_ID)
scheduler = AsyncIOScheduler()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "üìà –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def send_signals(message: types.Message):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª'")
    result = await generate_signal()
    if result is None:
        await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å!")
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*
"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{result['entry_price']}`
"
        f"–¶–µ–ª—å (+5%): `{result['target_price']}`
"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{result['stop_loss']}`
"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*
"
        f"RSI: `{result['rsi']}` ‚Äî {'–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω' if result['rsi'] < 30 else '–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω' if result['rsi'] > 70 else '–≤ –Ω–æ—Ä–º–µ'}
"
        f"MA7 > MA20: {'–¥–∞' if result['ma7'] > result['ma20'] else '–Ω–µ—Ç'}"
    )

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            text="üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π",
            callback_data=f"track:{result['symbol']}:{result['entry_price']}"
        )
    )

    await message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track:"))
async def handle_track_callback(callback_query: types.CallbackQuery):
    _, symbol, entry_price = callback_query.data.split(":")
    await tracker.start_tracking(symbol, float(entry_price))
    await callback_query.answer()
    await bot.send_message(USER_ID, f"üîî –ù–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {symbol.upper()} –æ—Ç {entry_price}")

@dp.message_handler(lambda message: message.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    await tracker.stop_all()
    await message.answer("üõë –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(dispatcher):
    scheduler.add_job(send_daily_signal, 'interval', days=1, start_date=datetime.now() + timedelta(seconds=10))
    scheduler.start()
    logger.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")

def send_daily_signal():
    asyncio.create_task(send_signal_now())

async def send_signal_now():
    result = await generate_signal()
    if result is None:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        return

    text = (
        f"üìä *–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {result['name']}*
"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{result['entry_price']}`
"
        f"–¶–µ–ª—å (+5%): `{result['target_price']}`
"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{result['stop_loss']}`
"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*
"
        f"RSI: `{result['rsi']}` ‚Äî {'–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω' if result['rsi'] < 30 else '–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω' if result['rsi'] > 70 else '–≤ –Ω–æ—Ä–º–µ'}
"
        f"MA7 > MA20: {'–¥–∞' if result['ma7'] > result['ma20'] else '–Ω–µ—Ç'}"
    )

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            text="üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π",
            callback_data=f"track:{result['symbol']}:{result['entry_price']}"
        )
    )

    await bot.send_message(USER_ID, text, reply_markup=keyboard)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
