import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
from crypto_utils import get_top_ton_wallet_coins

API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
ADMIN_ID = 347552741

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
tracked_coins = {}

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"), KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AnSam Bot!", reply_markup=main_kb)

@dp.message_handler(commands=['test'])
async def test_cmd(message: types.Message):
    await send_signal(message.chat.id)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_signal(message: types.Message):
    await send_signal(message.chat.id)

@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def follow_coin(message: types.Message):
    coin = await get_top_ton_wallet_coins()
    if coin:
        coin_id = coin['id']
        tracked_coins[coin_id] = {
            'start_price': coin['price'],
            'start_time': datetime.now(),
            'user_id': message.chat.id
        }
        await message.answer(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–æ–Ω–µ—Ç—É {coin_id.upper()} –ø–æ —Ü–µ–Ω–µ {coin['price']} USD")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã.")

async def send_signal(chat_id):
    coin = await get_top_ton_wallet_coins()
    if coin:
        probability = min(95, max(50, coin['score'] * 15))
        text = (
            f"üî• –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã: {coin['id'].upper()}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {coin['price']} USD\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {coin['change_7d']}%\n"
            f"–û–±—ä—ë–º: {coin['volume']} USD\n"
            f"üéØ –¶–µ–ª—å: +5%\n"
            f"üîê –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {probability}%"
        )
        await bot.send_message(chat_id, text, reply_markup=main_kb)
    else:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª.", reply_markup=main_kb)

async def check_tracked_coins():
    now = datetime.now()
    for coin_id, data in list(tracked_coins.items()):
        try:
            user_id = data['user_id']
            start_price = data['start_price']
            start_time = data['start_time']
            current_data = await get_top_ton_wallet_coins()

            if not current_data or current_data['id'] != coin_id:
                continue

            current_price = current_data['price']
            change = ((current_price - start_price) / start_price) * 100

            if change >= 5:
                await bot.send_message(user_id, f"üöÄ –ú–æ–Ω–µ—Ç–∞ {coin_id.upper()} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +5% —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è! –¶–µ–Ω–∞: {current_price} USD")
                tracked_coins.pop(coin_id)
            elif now - start_time >= timedelta(hours=12):
                direction = "–≤—ã—Ä–æ—Å–ª–∞" if change > 0 else "—É–ø–∞–ª–∞"
                await bot.send_message(user_id, f"‚åõ 12 —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ. –ú–æ–Ω–µ—Ç–∞ {coin_id.upper()} {direction} –Ω–∞ {round(abs(change), 2)}%. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                tracked_coins.pop(coin_id)
            elif change >= 3.5:
                await bot.send_message(user_id, f"üìà –ú–æ–Ω–µ—Ç–∞ {coin_id.upper()} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +3.5%! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USD")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–Ω–µ—Ç—ã {coin_id}: {e}")

async def scheduled_signal():
    await send_signal(ADMIN_ID)

async def scheduler_task():
    while True:
        await check_tracked_coins()
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def on_startup(_):
    scheduler.add_job(scheduled_signal, 'cron', hour=8, minute=0)
    scheduler.start()
    asyncio.create_task(scheduler_task())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
