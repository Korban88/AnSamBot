import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from config import BOT_TOKEN, USER_ID
from signal_generator import generate_signal
from coin_tracker import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

tracker = CoinTracker()

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
main_keyboard = InlineKeyboardMarkup(row_width=2)
main_keyboard.add(
    InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
    InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.chat.id != USER_ID:
        return
    await message.answer("AnSam Bot –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–±—ã–ª–∏!", reply_markup=main_keyboard)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async def send_signal():
    result = generate_signal()
    if result is None:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ —Ä—ã–Ω–æ–∫ –∂–∏–≤—ë—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    signal_text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']} ({result['symbol']})*\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `${result['entry']}`\n"
        f"–¶–µ–ª—å +5%: `${result['target']}`\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: `${result['stop']}`\n\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: `{result['change_24h']:.2f}%`\n"
        f"RSI: `{result['rsi']}`, MA7: `{result['ma7']}`, MA20: `{result['ma20']}`"
    )

    track_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(f"üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ {result['symbol'].upper()}", callback_data=f"track:{result['symbol']}")
    )

    await bot.send_message(USER_ID, signal_text, reply_markup=track_button)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.callback_query_handler(lambda c: c.data == "more_signal")
async def handle_more_signal(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await send_signal()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    await callback_query.answer("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    tracker.stop_all()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith("track:"))
async def track_coin(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split(":")[1]
    await callback_query.answer(f"–¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {symbol.upper()}")
    tracker.track_coin(symbol, USER_ID)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ 8:00 –ú–°–ö
async def send_daily_signal():
    now = datetime.utcnow() + timedelta(hours=3)  # –ú–°–ö
    logger.info(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {(24*60 - now.hour*60 - now.minute)} –º–∏–Ω—É—Ç")
    await send_signal()

# –°—Ç–∞—Ä—Ç
async def on_startup(dp):
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    scheduler.add_job(send_daily_signal, 'cron', hour=8, minute=0)
    scheduler.start()

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
