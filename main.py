# main.py

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler
from config import TELEGRAM_BOT_TOKEN
from analysis import analyze_cryptos, load_top3_cache
from crypto_utils import get_current_price
from tracking import track_price

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ top-3
used_signals = []

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: CallbackContext.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup)

async def button_handler(update: Update, context: CallbackContext.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_signal":
        await send_next_signal(query, context)

    elif query.data.startswith("track_"):
        coin_id = query.data.replace("track_", "")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã *{coin_id}*...", parse_mode="Markdown")
        asyncio.create_task(track_price(context.bot, coin_id))

async def send_next_signal(query, context):
    top3 = load_top3_cache()
    if not top3:
        top3 = analyze_cryptos()

    if not top3:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â—ë –Ω–µ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
    next_coin = None
    for coin in top3:
        if coin["id"] not in used_signals:
            next_coin = coin
            used_signals.append(coin["id"])
            break

    if not next_coin:
        used_signals.clear()
        next_coin = top3[0]
        used_signals.append(next_coin["id"])

    coin = next_coin
    coin_id = coin["id"]
    price = coin["price"]
    target_price = price * 1.05
    stop_loss_price = price * 0.97
    change_24h = coin["change_24h"]
    rsi = coin["rsi"]
    ma = coin["ma"]
    prob = coin["probability"]

    explanation = (
        f"*–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* `{coin_id}`\n"
        f"üéØ –¶–µ–ª—å: +5%\n"
        f"üí∞ –í—Ö–æ–¥: ${price:.4f}\n"
        f"üìà –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:.4f}\n"
        f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss_price:.4f}\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{prob}%*\n\n"
        f"‚Äî RSI: {rsi:.1f} (–¥–æ 30 ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)\n"
        f"‚Äî MA: ${ma:.4f} (—Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)\n"
        f"‚Äî 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change_24h:+.2f}%"
    )

    keyboard = [
        [InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{coin_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(explanation, parse_mode="Markdown", reply_markup=reply_markup)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
