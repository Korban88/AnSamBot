import logging
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from datetime import datetime, timedelta
import asyncio

from crypto_utils import get_top_ton_wallet_coins as analyze_tokens

# üîê –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
ADMIN_ID = 347552741

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
scheduler = AsyncIOScheduler()
moscow = timezone('Europe/Moscow')

# üëâ –ö–Ω–æ–ø–∫–∏
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")

# üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(chat_id: int):
    try:
        coin = analyze_tokens()
        if coin:
            growth_prob = min(95, max(50, coin['score'] * 10))  # –ü—Ä–∏–º–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            msg = (
                f"üìà –ú–æ–Ω–µ—Ç–∞: {coin['id'].upper()}\n"
                f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${coin['price']}\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {coin['change_24h']}%\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 7–¥: {coin['change_7d']}%\n"
                f"üìà –û–±—ä—ë–º: ${coin['volume']:,}\n"
                f"üéØ –¶–µ–ª—å: +5%\n"
                f"üìâ –°—Ç–æ–ø-–ª–æ—Å—Å: -3%\n"
                f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {growth_prob}%"
            )
        else:
            msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã."
        await bot.send_message(chat_id, msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_signal(): {e}")

# üïó –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 (–ú–°–ö)
async def scheduled_signal():
    await send_signal(ADMIN_ID)

scheduler.add_job(
    scheduled_signal,
    trigger='cron',
    hour=8,
    minute=0,
    timezone=moscow
)

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start –∏ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=start_keyboard)

# ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª¬ª
@dp.message_handler(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_more_signal(message: types.Message):
    await send_signal(message.chat.id)

# üß™ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.message_handler(commands=["test"])
async def test_cmd(message: types.Message):
    await send_signal(message.chat.id)

# ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ ¬´–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π¬ª (–∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ)
@dp.message_handler(lambda m: m.text == "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def handle_follow(message: types.Message):
    await message.reply("üîú –§—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã –ø–æ—è–≤–∏—Ç—Å—è —Å–∫–æ—Ä–æ!")

# üöÄ –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
