import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from config import BOT_TOKEN, USER_ID
from signal_generator import generate_signal
from tracker import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
tracker = CoinTracker(bot, USER_ID)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
main_keyboard.add(KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
@dp.message_handler(lambda message: message.text == "üìà –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def send_signal(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    result = generate_signal()
    if not result:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{result['price']}`\n"
        f"–¶–µ–ª—å: `{result['target_price']} (+5%)`\n"
        f"Stop-loss: `{result['stop_loss']}`\n\n"
        f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {result['probability']}%\n"
        f"üìä {result['reason']}"
    )

    track_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['symbol']}")
    )
    await message.answer(text, reply_markup=track_button)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    if message.from_user.id != USER_ID:
        return
    await tracker.stop_all()
    await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track:"))
async def handle_tracking_callback(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split(":")[1]
    await tracker.start_tracking(symbol)
    await callback_query.answer(f"‚è± –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {symbol}")

# –ü–ª–∞–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
async def send_daily_signal():
    result = generate_signal()
    if not result:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{result['price']}`\n"
        f"–¶–µ–ª—å: `{result['target_price']} (+5%)`\n"
        f"Stop-loss: `{result['stop_loss']}`\n\n"
        f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {result['probability']}%\n"
        f"üìä {result['reason']}"
    )

    track_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['symbol']}")
    )
    await bot.send_message(USER_ID, text, reply_markup=track_button)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.add_job(send_daily_signal, 'cron', hour=8, minute=0)
scheduler.start()
logger.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")

# –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞
async def on_startup(dp):
    await tracker.load()

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
