import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from crypto_utils import get_top_coins
from tracking import CoinTracker
import logging

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
tracker = CoinTracker()

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))
keyboard.add(KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç
@dp.message_handler(Text(equals="üü¢ –°—Ç–∞—Ä—Ç"))
async def activate_bot(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.")

# –ö–Ω–æ–ø–∫–∞ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª
@dp.message_handler(Text(equals="üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
async def send_signals(message: types.Message):
    coins = get_top_coins()
    if not coins:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    for coin in coins:
        try:
            name = coin['id']
            price = coin['price']
            change = coin['change_24h']
            probability = coin['probability']
            target_price = coin['target_price']
            stop_loss_price = coin['stop_loss_price']

            text = (
                f"üí∞ *–°–∏–≥–Ω–∞–ª:*\n"
                f"–ú–æ–Ω–µ—Ç–∞: {name}\n"
                f"–¶–µ–Ω–∞: *{price} $*\n"
                f"–†–æ—Å—Ç –∑–∞ 24—á: {change}%\n"
                f"{'üü¢' if probability >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {probability}%\n"
                f"üéØ –¶–µ–ª—å: *{target_price} $* \\(+5%\\)\n"
                f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price} $ \\(-3\\.5%\\)"
            )

            await message.answer(text)

        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ö–Ω–æ–ø–∫–∞ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@dp.message_handler(Text(equals="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
async def stop_tracking(message: types.Message):
    tracker.clear_tracking()
    await message.answer("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ö–Ω–æ–ø–∫–∞ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π (–∑–∞–≥–ª—É—à–∫–∞)
@dp.message_handler(Text(equals="üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))
async def track_coin(message: types.Message):
    await message.answer("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç.")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    from scheduler import schedule_daily_signal
    schedule_daily_signal(dp, bot, get_top_coins)
    executor.start_polling(dp, skip_updates=True)
