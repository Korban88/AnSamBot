import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from crypto_utils import get_top_ton_wallet_coins

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
OWNER_ID = 347552741

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
tracked_coin = None
tracked_data = {}

# === –ö–ù–û–ü–ö–ò ===
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
        InlineKeyboardButton("üîç –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data="track_coin")
    )
    return keyboard

# === –ê–ù–ê–õ–ò–ó ===
async def send_signal():
    coin = get_top_ton_wallet_coins()
    if coin is None:
        await bot.send_message(OWNER_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—É.")
        return

    message = (
        f"üí∞ –°–∏–≥–Ω–∞–ª:
"
        f"–ú–æ–Ω–µ—Ç–∞: {coin['id'].upper()}
"
        f"–¶–µ–Ω–∞: ${coin['price']}
"
        f"‚¨ÜÔ∏è 24—á: {coin['change_24h']}%
"
        f"üìä 7–¥: {coin['change_7d']}%
"
        f"üìà –û–±—ä—ë–º: {coin['volume']}
"
        f"üî¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {min(coin['score'] * 15, 95)}%"
    )

    await bot.send_message(OWNER_ID, message, reply_markup=get_main_keyboard())

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=get_main_keyboard())

@dp.message_handler(commands=['test'])
async def test_command(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:")
    await send_signal()

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
@dp.callback_query_handler(lambda call: True)
async def handle_callback(call: types.CallbackQuery):
    if call.data == "get_signal":
        await bot.answer_callback_query(call.id)
        await send_signal()

    elif call.data == "track_coin":
        global tracked_coin, tracked_data
        coin = get_top_ton_wallet_coins()
        if coin is None:
            await call.message.answer("\u274C –ú–æ–Ω–µ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        tracked_coin = coin['id']
        tracked_data = {
            'start_time': datetime.utcnow(),
            'start_price': coin['price']
        }

        await call.message.answer(f"‚è± –ù–∞—á–∞–ª —Å–ª–µ–¥–∏—Ç—å –∑–∞ {tracked_coin.upper()} ‚Äî ${tracked_data['start_price']}")
        await bot.answer_callback_query(call.id)

# === –ü–†–û–í–ï–†–ö–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===
async def check_tracking():
    global tracked_coin, tracked_data
    if not tracked_coin:
        return

    now = datetime.utcnow()
    coin = get_top_ton_wallet_coins()
    if not coin or coin['id'] != tracked_coin:
        return

    current_price = coin['price']
    start_price = tracked_data['start_price']
    change_percent = round((current_price - start_price) / start_price * 100, 2)
    time_diff = now - tracked_data['start_time']

    if change_percent >= 5:
        await bot.send_message(OWNER_ID, f"üéâ {tracked_coin.upper()} –≤—ã—Ä–æ—Å –Ω–∞ {change_percent}%! (${start_price} ‚ûî ${current_price})")
        tracked_coin = None
    elif time_diff >= timedelta(hours=12):
        trend = "–≤—ã—Ä–æ—Å–ª–∞" if change_percent > 0 else "—É–ø–∞–ª–∞"
        await bot.send_message(OWNER_ID, f"‚è± 12 —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ. {tracked_coin.upper()} {trend} –Ω–∞ {change_percent}% (${start_price} ‚ûî ${current_price})")
        tracked_coin = None
    elif change_percent >= 3.5:
        await bot.send_message(OWNER_ID, f"‚¨ÜÔ∏è {tracked_coin.upper()} –≤—ã—Ä–æ—Å –Ω–∞ 3.5%+ (${start_price} ‚ûî ${current_price})")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
scheduler.add_job(send_signal, trigger='cron', hour=5, minute=0)  # 8:00 –ú–°–ö
scheduler.add_job(check_tracking, trigger='interval', minutes=10)
scheduler.start()

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
