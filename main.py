import logging
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from crypto_utils import get_top_ton_wallet_coins as analyze_tokens

API_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
moscow = timezone('Europe/Moscow')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(chat_id):
    try:
        coin = analyze_tokens()

        if coin:
            symbol = coin['id'].upper()
            current_price = coin['price']
            target_price = round(current_price * 1.05, 4)
            stop_loss = round(current_price * 0.974, 4)
            probability = random.randint(76, 91)

            message = (
                "üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É\n\n"
                f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}$\n"
                f"–¶–µ–ª—å: +5% ‚Üí {target_price}$\n"
                "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: BUY\n"
                f"–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∏–∂–µ: {stop_loss}$ (Stop Loss)\n\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {probability}%"
            )
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞."

        await bot.send_message(chat_id, message, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_signal(): {e}")
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{e}", reply_markup=keyboard)

# –ó–∞–¥–∞—á–∞ –Ω–∞ 8:00 –ø–æ –ú–æ—Å–∫–≤–µ
async def scheduled_signal():
    chat_id = 347552741
    await send_signal(chat_id)

scheduler.add_job(scheduled_signal, trigger='cron', hour=8, minute=0, timezone=moscow)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª.", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞: –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_signal_handler(message: types.Message):
    await send_signal(message.chat.id)

# –ö–æ–º–∞–Ω–¥–∞ /test
@dp.message_handler(commands=['test'])
async def test_handler(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:")
    await send_signal(message.chat.id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
