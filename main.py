import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from datetime import datetime
import asyncio
from crypto_utils import get_top_ton_wallet_coins as analyze_tokens

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ç–∞–π–º–∑–æ–Ω–∞
scheduler = AsyncIOScheduler()
moscow = timezone('Europe/Moscow')

# –ö–Ω–æ–ø–∫–∏
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
start_keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))

# üîß –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(chat_id):
    try:
        result = analyze_tokens()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")

        if not result:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É.")
            return

        msg = (
            f"üìà *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã:*\n\n"
            f"*–ú–æ–Ω–µ—Ç–∞:* `{result['id'].upper()}`\n"
            f"*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* `${result['price']}`\n"
            f"*–¶–µ–ª—å +5%:* `${round(result['price'] * 1.05, 4)}`\n"
            f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* `${round(result['price'] * 0.96, 4)}`\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* `{result['change_24h']}%`\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥:* `{result['change_7d']}%`\n"
            f"*–û–±—ä—ë–º:* `${result['volume']}`"
        )
        await bot.send_message(chat_id, msg, parse_mode="Markdown")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ send_signal()")
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{str(e)}")

# üïó –ü–ª–∞–Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö
async def scheduled_signal():
    await send_signal(chat_id=347552741)  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

scheduler.add_job(
    scheduled_signal,
    trigger='cron',
    hour=8,
    minute=0,
    timezone=moscow
)

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=start_keyboard)

# üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def more_signal_handler(message: types.Message):
    await send_signal(message.chat.id)

# üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['test'])
async def test_handler(message: types.Message):
    await message.reply("‚úèÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:")
    await send_signal(message.chat.id)

# üîÅ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
