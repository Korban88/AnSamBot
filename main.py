import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from analysis import analyze_all_coins, get_current_price
from coin_tracker import CoinTracker
from config import BOT_TOKEN, USER_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
coin_tracker = CoinTracker(bot, USER_ID)
signal_index = {}

start_keyboard = InlineKeyboardMarkup(row_width=1)
start_keyboard.add(
    InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
    InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
    InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    signal_index[message.chat.id] = 0
    await message.answer("‚úÖ –Ø –≥–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ñ–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª¬ª.", reply_markup=start_keyboard)

@dp.callback_query_handler(lambda c: c.data == "start")
async def start_callback(callback_query: types.CallbackQuery):
    signal_index[callback_query.message.chat.id] = 0
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –≥–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.", reply_markup=start_keyboard)

@dp.callback_query_handler(lambda c: c.data == "more_signal")
async def more_signal(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)

    signals = analyze_all_coins()
    if not signals:
        await bot.send_message(user_id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ —Ä—ã–Ω–æ–∫ –∂–∏–≤—ë—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    idx = signal_index.get(user_id, 0) % len(signals)
    signal = signals[idx]
    signal_index[user_id] = idx + 1

    symbol = signal["symbol"]
    entry = signal["current_price"]
    target = round(entry * 1.05, 6)
    stop_loss = round(entry * 0.97, 6)

    message = (
        f"üìà *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã* `{symbol.upper()}`\n\n"
        f"*üéØ –¶–µ–ª—å:* +5% ‚Üí `{target} $`\n"
        f"*üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* `{entry} $`\n"
        f"*üõë –°—Ç–æ–ø-–ª–æ—Å—Å:* `{stop_loss} $`\n"
        f"*üìä –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞:* {signal['probability']}%\n"
        f"*üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:* {signal['change_percent']}%"
    )

    follow_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(f"üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π {symbol.upper()}", callback_data=f"follow_{symbol}")
    )

    await bot.send_message(user_id, message, reply_markup=follow_button)

@dp.callback_query_handler(lambda c: c.data.startswith("follow_"))
async def follow_coin(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split("_")[1]
    price = get_current_price(symbol)
    if price:
        coin_tracker.track_coin(symbol, price)
        await bot.send_message(callback_query.from_user.id, f"üëÅ –Ø –Ω–∞—á–∞–ª —Å–ª–µ–¥–∏—Ç—å –∑–∞ *{symbol.upper()}* –ø–æ —Ü–µ–Ω–µ {price} $.")
    else:
        await bot.send_message(callback_query.from_user.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol.upper()}.")

@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    coin_tracker.tracked_coins.clear()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üõë –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def daily_signal():
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    signals = analyze_all_coins()
    if not signals:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")
        return

    signal = signals[0]
    symbol = signal["symbol"]
    entry = signal["current_price"]
    target = round(entry * 1.05, 6)
    stop_loss = round(entry * 0.97, 6)

    message = (
        f"üåÖ *–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ {symbol.upper()}*\n\n"
        f"*üéØ –¶–µ–ª—å:* +5% ‚Üí `{target} $`\n"
        f"*üí∞ –í—Ö–æ–¥:* `{entry} $`\n"
        f"*üõë –°—Ç–æ–ø:* `{stop_loss} $`\n"
        f"*üìä –ü—Ä–æ–≥–Ω–æ–∑:* {signal['probability']}%\n"
        f"*üìâ –ó–∞ 24—á:* {signal['change_percent']}%"
    )

    follow_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(f"üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π {symbol.upper()}", callback_data=f"follow_{symbol}")
    )

    await bot.send_message(USER_ID, message, reply_markup=follow_button)

if __name__ == "__main__":
    scheduler.add_job(daily_signal, "cron", hour=8, minute=0, timezone="Europe/Moscow")
    scheduler.add_job(coin_tracker.run, "interval", minutes=10)
    scheduler.start()
    logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
