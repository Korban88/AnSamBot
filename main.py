import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from analysis import analyze_all_coins, get_current_price
from tracking import CoinTracker
from crypto_list import crypto_list

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
OWNER_ID = 347552741

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
tracker = CoinTracker(bot)

signal_cache = {
    "last_signals": [],
    "index": 0
}


def get_signal_message(signal):
    return (
        f"*–ú–æ–Ω–µ—Ç–∞:* `{signal['coin_id']}`\n"
        f"*–í—Ö–æ–¥:* ${signal['start_price']}\n"
        f"*–¶–µ–ª—å +5\\%:* ${round(signal['start_price'] * 1.05, 4)}\n"
        f"*–°—Ç–æ–ø\\-–ª–æ—Å—Å \\-3\\%:* ${round(signal['start_price'] * 0.97, 4)}\n"
        f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* *{signal['probability']}%*\n"
        f"_–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {signal['change_pct']}%_"
    )


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
        InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\\!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\\.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'more_signal')
async def more_signal(callback_query: types.CallbackQuery):
    await callback_query.answer()
    if not signal_cache["last_signals"]:
        signals = analyze_all_coins(crypto_list)
        strong_signals = [s for s in signals if s["probability"] >= 65 and s["change_pct"] > -3]
        strong_signals.sort(key=lambda x: x["probability"], reverse=True)
        signal_cache["last_signals"] = strong_signals[:3]
        signal_cache["index"] = 0

    if signal_cache["last_signals"]:
        index = signal_cache["index"] % len(signal_cache["last_signals"])
        signal = signal_cache["last_signals"][index]
        signal_cache["index"] += 1

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['coin_id']}")
        )

        await bot.send_message(callback_query.from_user.id, get_signal_message(signal), reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")


@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_coin(callback_query: types.CallbackQuery):
    await callback_query.answer()
    coin_id = callback_query.data.split("_", 1)[1]
    price = get_current_price(coin_id)
    if price:
        tracker.track_coin(callback_query.from_user.id, coin_id, price)
        await bot.send_message(callback_query.from_user.id, f"üîç –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ `{coin_id}` –æ—Ç ${price}")
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã.")


@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    await callback_query.answer()
    tracker.stop_all_tracking(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def daily_signal():
    signals = analyze_all_coins(crypto_list)
    strong_signals = [s for s in signals if s["probability"] >= 65 and s["change_pct"] > -3]
    strong_signals.sort(key=lambda x: x["probability"], reverse=True)
    if strong_signals:
        signal = strong_signals[0]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['coin_id']}")
        )
        await bot.send_message(OWNER_ID, get_signal_message(signal), reply_markup=keyboard)
    else:
        await bot.send_message(OWNER_ID, "–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è.")


if __name__ == '__main__':
    scheduler.add_job(daily_signal, 'cron', hour=8, minute=0)
    scheduler.add_job(tracker.run, 'interval', minutes=10)
    scheduler.start()
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp)
