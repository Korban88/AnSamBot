import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import analyze_tokens, track_price_changes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
kb.add(KeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def start(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=kb)

@dp.message_handler(commands=["test"])
async def test(message: types.Message):
    await send_signal(message.chat.id, test_mode=True)

@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_more_signal(message: types.Message):
    await send_signal(message.chat.id)

@dp.message_handler(lambda message: message.text == "üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def handle_follow(message: types.Message):
    result = analyze_tokens()
    if not result:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return

    token_id = result["id"]
    entry_price = result["price"]

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–æ–Ω–µ—Ç—É: {token_id.upper()}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${entry_price}")
    asyncio.create_task(track_price_changes(bot, message.chat.id, token_id, entry_price))

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ===
async def scheduled_signal():
    await send_signal(USER_ID)

scheduler.add_job(scheduled_signal, "cron", hour=8, minute=0)
scheduler.start()

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ ===
async def send_signal(chat_id, test_mode=False):
    try:
        result = analyze_tokens()
        if not result:
            await bot.send_message(chat_id, "\u26A0\ufe0f –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        msg = "\ud83d\udcc8 –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã:\n"
        if test_mode:
            msg = "\ud83d\udd8b\ufe0f –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:\n"

        msg += (
            f"\n–ú–æ–Ω–µ—Ç–∞: {result['id'].upper()}"
            f"\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${result['price']}"
            f"\n–¶–µ–ª—å +5%: ${round(result['price'] * 1.05, 4)}"
            f"\n–°—Ç–æ–ø-–ª–æ—Å—Å: ${round(result['price'] * 0.955, 4)}"
            f"\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {result['change_24h']}%"
            f"\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {result['change_7d']}%"
            f"\n–û–±—ä—ë–º: ${result['volume']}"
        )

        await bot.send_message(chat_id, msg)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_signal(): {e}")
        await bot.send_message(chat_id, f"\u26A0\ufe0f –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{e}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
