import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from crypto_utils import get_top_coins
from scheduler import schedule_daily_signal

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é
user_coin_index = {}

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(
    KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"),
    KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
)
keyboard.add(
    KeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"),
    KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)


@dp.message_handler(Text(equals="üü¢ –°—Ç–∞—Ä—Ç"))
async def activate_bot(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.")


@dp.message_handler(Text(equals="üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
async def send_next_coin(message: types.Message):
    user_id = message.from_user.id
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª'")

    coins = get_top_coins()
    if not coins:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in user_coin_index:
        user_coin_index[user_id] = 0
    index = user_coin_index[user_id]

    if index >= len(coins):
        await message.answer("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    coin = coins[index]
    user_coin_index[user_id] += 1

    text = (
        f"üí∞ *–°–∏–≥–Ω–∞–ª:*\n"
        f"–ú–æ–Ω–µ—Ç–∞: *{coin['id']}*\n"
        f"–¶–µ–Ω–∞: *{coin['price']} $*\n"
        f"–†–æ—Å—Ç –∑–∞ 24—á: *{coin['change_24h']}%*\n"
        f"{'üü¢' if coin['probability'] >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{coin['probability']}%*\n"
        f"üéØ –¶–µ–ª—å: *{coin['target_price']} $* (+5%)\n"
        f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: *{coin['stop_loss_price']} $* (-3.5%)"
    )
    await message.answer(text, parse_mode="Markdown")


@dp.message_handler(Text(equals="üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))
async def track_coin(message: types.Message):
    await message.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.")


@dp.message_handler(Text(equals="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
async def stop_tracking(message: types.Message):
    await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def on_startup(dispatcher):
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")
    schedule_daily_signal(dispatcher, bot, get_top_coins, user_id=USER_ID)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
