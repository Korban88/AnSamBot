import logging
import time
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_BOT_TOKEN as TELEGRAM_TOKEN, OWNER_ID
from analysis import analyze_cryptos, load_top3_cache
from tracking import start_tracking_coin, stop_all_tracking
from crypto_utils import fetch_and_cache_indicators
from telegram.helpers import escape_markdown

logging.basicConfig(level=logging.INFO)
user_signal_index = {}

def escape_markdown(text):
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{c}" if c in escape_chars else c for c in str(text))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=reply_markup)

async def get_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_signal_index:
        user_signal_index[user_id] = 0

    top_3 = load_top3_cache()
    if not top_3:
        top_3 = analyze_cryptos()

    if not top_3:
        await update.callback_query.message.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    index = user_signal_index[user_id] % len(top_3)
    coin = top_3[index]
    user_signal_index[user_id] += 1

    price = coin["price"]
    target_price = round(price * 1.05, 4)
    stop_loss = round(price * 0.97, 4)
    message = (
        f"*üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {escape_markdown(coin['id'].capitalize(), version=2)}*\n"
        f"–¶–µ–Ω–∞: {escape_markdown(str(price), version=2)}\n"
        f"24—á: {escape_markdown(str(coin['change_24h']), version=2)}%\n"
        f"RSI: {escape_markdown(str(coin['rsi']), version=2)} \\| MA: {escape_markdown(str(coin['ma']), version=2)}\n"
        f"üéØ –¶–µ–ª—å: {escape_markdown(str(target_price), version=2)}\n"
        f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {escape_markdown(str(stop_loss), version=2)}\n"
        f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{escape_markdown(str(coin['probability']), version=2)}%*"
    )

    keyboard = [[InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{coin['id']}")]]
    await update.callback_query.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="MarkdownV2")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("track_"):
        coin_id = query.data.split("_", 1)[1]
        await start_tracking_coin(coin_id, query.message.chat_id, context.bot)

    elif query.data == "get_signal":
        await get_signal(update, context)

async def stop_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await stop_all_tracking(update.effective_chat.id, context.bot)
    await update.message.reply_text("‚õî –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def main():
    fetch_and_cache_indicators()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–µ—à

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop_tracking))
    app.add_handler(CallbackQueryHandler(button_handler))
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
