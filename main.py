import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import TELEGRAM_TOKEN, OWNER_ID
from analysis import get_top_3_cryptos
from tracking import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
coin_tracker = CoinTracker(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup(row_width=2)
main_keyboard.add(
    InlineKeyboardButton("\U0001F7E2 –°—Ç–∞—Ä—Ç", callback_data="start"),
    InlineKeyboardButton("\U0001F680 –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
)
main_keyboard.add(
    InlineKeyboardButton("\U0001F6D1 –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)


@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\.",
        reply_markup=main_keyboard
    )


@dp.callback_query_handler(lambda c: c.data == "start")
async def process_start(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "\U0001F4AC –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å\!", reply_markup=main_keyboard)


@dp.callback_query_handler(lambda c: c.data == "more_signal")
async def more_signal(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    signal = await get_top_3_cryptos(1)
    if not signal:
        await bot.send_message(callback_query.from_user.id, "\u26A0\ufe0f –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç —Å–µ–π—á–∞—Å\.")
        return

    signal = signal[0]
    symbol = signal.get("symbol", "-")
    price = signal.get("price", 0)
    target = signal.get("target_price", 0)
    stop_loss = signal.get("stop_loss", 0)
    probability = signal.get("probability", 0)

    text = (
        f"\U0001F4C8 *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {symbol}\n\n"
        f"\U0001F539 *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${price}\n"
        f"üéØ *–¶–µ–ª—å \(+5%\):* ${target}\n"
        f"üõë *–°—Ç–æ–ø\-–ª–æ—Å—Å \(\-3%\):* ${stop_loss}\n"
        f"üìä *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {probability}%"
    )

    signal_keyboard = InlineKeyboardMarkup(row_width=2)
    signal_keyboard.add(
        InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{symbol}"),
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
        InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )

    await bot.send_message(callback_query.from_user.id, text, reply_markup=signal_keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_coin(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split("_")[1]
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"‚è± –ó–∞–ø—É—Å–∫–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {symbol}\.")
    coin_tracker.add_tracking(callback_query.from_user.id, symbol)


@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    coin_tracker.remove_all_tracking(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\.")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
async def daily_signal():
    signal = await get_top_3_cryptos(1)
    if not signal:
        return

    signal = signal[0]
    symbol = signal.get("symbol", "-")
    price = signal.get("price", 0)
    target = signal.get("target_price", 0)
    stop_loss = signal.get("stop_loss", 0)
    probability = signal.get("probability", 0)

    text = (
        f"\U0001F4C8 *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {symbol}\n\n"
        f"\U0001F539 *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${price}\n"
        f"üéØ *–¶–µ–ª—å \(+5%\):* ${target}\n"
        f"üõë *–°—Ç–æ–ø\-–ª–æ—Å—Å \(\-3%\):* ${stop_loss}\n"
        f"üìä *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {probability}%"
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{symbol}")
    )
    await bot.send_message(OWNER_ID, text, reply_markup=keyboard)


scheduler.add_job(daily_signal, "cron", hour=8, minute=0)
scheduler.add_job(coin_tracker.run, "interval", minutes=10)
scheduler.start()

logger.info("\u2705 –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
