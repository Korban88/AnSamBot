# main.py (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å –≤—ã–∑–æ–≤–æ–º fetch_and_cache_indicators)

import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_BOT_TOKEN
from handlers import start, button_callback
from crypto_utils import fetch_and_cache_indicators
import nest_asyncio

async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))

    await app.run_polling()

if __name__ == "__main__":
    fetch_and_cache_indicators()  # –∫–ª—é—á–µ–≤–æ–π –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª indicators_cache.json –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω
    try:
        import json
        with open("indicators_cache.json", "r") as f:
            cache = json.load(f)
            print(f"\nüì¶ –ö–µ—à: {len(cache)} –º–æ–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à–∞: {e}")

    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
