import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_USER_ID
from signal_utils import get_next_signal_message, reset_signal_index
from tracking import tracking_loop
from utils import escape_markdown

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    await message.answer(escape_markdown("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!"), reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    signal_message, coin_id, entry_price = await get_next_signal_message()
    await message.answer(escape_markdown(signal_message), reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_reset_signal_index(message: types.Message):
    reset_signal_index()
    await message.answer(escape_markdown("‚ôªÔ∏è –ò–Ω–¥–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ–π–¥—É—Ç —Å–Ω–∞—á–∞–ª–∞."), reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    await handle_start(message)


if __name__ == "__main__":
    logger.info("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    async def on_startup(dispatcher):
        asyncio.create_task(tracking_loop(bot))

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
