import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from crypto_utils import get_top_ton_wallet_coins
from tracking import start_tracking, stop_all_trackings

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
ADMIN_ID = 347552741

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
kb = InlineKeyboardMarkup(row_width=1)
kb.add(
    InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
    InlineKeyboardButton(text="–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data="track_coin"),
    InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.",
        reply_markup=kb
    )

# === Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.callback_query_handler(lambda c: c.data == "get_signal")
async def handle_get_signal(callback_query: types.CallbackQuery):
    await callback_query.answer()
    coin = get_top_ton_wallet_coins()
    if coin:
        price = coin['price']
        target_price = round(price * 1.05, 4)
        stop_loss_price = round(price * 0.965, 4)

        text = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {price} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10 + 10}%\n"
            f"üéØ –¶–µ–ª—å: {target_price} $ (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price} $ (-3.5%)"
        )
        await bot.send_message(callback_query.from_user.id, text)
    else:
        await bot.send_message(callback_query.from_user.id, "–ú–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@dp.callback_query_handler(lambda c: c.data == "track_coin")
async def handle_track_coin(callback_query: types.CallbackQuery):
    await callback_query.answer()
    coin = get_top_ton_wallet_coins()
    if coin:
        await start_tracking(bot, callback_query.from_user.id, coin['id'], coin['price'])
        await bot.send_message(callback_query.from_user.id, f"üõ∞ –ú–æ–Ω–µ—Ç–∞ {coin['id']} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –£–≤–µ–¥–æ–º–∏–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ +3.5% –∏–ª–∏ –ø–æ –∏—Ç–æ–≥–∞–º 12—á.")
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def handle_stop_tracking(callback_query: types.CallbackQuery):
    await callback_query.answer()
    stop_all_trackings(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "‚ùå –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# === –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ 8:00 ===
async def scheduled_signal():
    coin = get_top_ton_wallet_coins()
    if coin:
        price = coin['price']
        target_price = round(price * 1.05, 4)
        stop_loss_price = round(price * 0.965, 4)

        text = (
            f"üí∞ –°–∏–≥–Ω–∞–ª:\n"
            f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
            f"–¶–µ–Ω–∞: {price} $\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['score'] * 10 + 10}%\n"
            f"üéØ –¶–µ–ª—å: {target_price} $ (+5%)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price} $ (-3.5%)"
        )
        await bot.send_message(ADMIN_ID, text)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫ ===
scheduler.add_job(scheduled_signal, "cron", hour=8, minute=0)
async def on_startup(dp):
    scheduler.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
