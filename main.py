import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import TELEGRAM_TOKEN, TELEGRAM_ID
from analysis import get_top_signals
from tracking import CoinTracker
from crypto_list import crypto_list
from crypto_utils import get_current_price

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

scheduler = AsyncIOScheduler()
tracker = CoinTracker(bot)

top_signals_cache = []
signal_index = 0

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
        InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more_signal"),
    )
    keyboard.add(
        InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )
    return keyboard

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    keyboard = get_main_keyboard()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.callback_query_handler(lambda c: c.data == "start")
async def process_start(callback_query: types.CallbackQuery):
    await callback_query.answer("–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")

# –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª
@dp.callback_query_handler(lambda c: c.data == "more_signal")
async def more_signal(callback_query: types.CallbackQuery):
    global top_signals_cache, signal_index

    if not top_signals_cache:
        top_signals_cache = await get_top_signals()
        signal_index = 0

    if signal_index >= len(top_signals_cache):
        await bot.send_message(callback_query.from_user.id, "–ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    signal = top_signals_cache[signal_index]
    signal_index += 1

    message = (
        f"üìà –°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: *{signal['symbol']}*\n\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['probability']}%*\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{signal['entry_price']} USDT*\n"
        f"–¶–µ–ª—å +5%: *{signal['target_price']} USDT*\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: *{signal['stop_loss']} USDT*"
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")
    )

    await bot.send_message(callback_query.from_user.id, message, parse_mode="Markdown", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"
@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_coin(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split("_", 1)[1]
    await tracker.add_tracking(callback_query.from_user.id, symbol)
    await callback_query.answer(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {symbol}.")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_tracking(callback_query: types.CallbackQuery):
    await tracker.stop_all_tracking(callback_query.from_user.id)
    await callback_query.answer("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ
async def daily_signal():
    top_signals = await get_top_signals()
    if not top_signals:
        return

    signal = top_signals[0]
    message = (
        f"üìà –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: *{signal['symbol']}*\n\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['probability']}%*\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{signal['entry_price']} USDT*\n"
        f"–¶–µ–ª—å +5%: *{signal['target_price']} USDT*\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: *{signal['stop_loss']} USDT*"
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['symbol']}")
    )

    await bot.send_message(TELEGRAM_ID, message, parse_mode="Markdown", reply_markup=keyboard)

if __name__ == "__main__":
    scheduler.add_job(daily_signal, "cron", hour=8, minute=0)
    scheduler.add_job(tracker.run, "interval", minutes=10)
    scheduler.start()
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
