import logging
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from config import TELEGRAM_TOKEN, USER_ID
from analysis import analyze_cryptos
from tracking import CoinTracker, CoinTrackingManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
def escape_markdown(text):
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: üèÅ —Å–≤–µ—Ä—Ö—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∏–∂–µ
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üèÅ –°—Ç–∞—Ä—Ç"))
keyboard.row(
    KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"),
    KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ø-3 –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
top3_cache = []
top3_index = 0

# –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda message: message.text == "üèÅ –°—Ç–∞—Ä—Ç")
async def handle_start_command(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n"
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞."
    )
    await message.answer(escape_markdown(text), reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞: –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª
@dp.message_handler(lambda message: message.text == "üìä –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_get_signal(message: types.Message):
    global top3_cache, top3_index
    logger.info("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    if not top3_cache or top3_index >= len(top3_cache):
        top3_cache = await analyze_cryptos()
        top3_index = 0

    if not top3_cache:
        await message.answer("‚ùå –¢–æ–ø-3 –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    coin_data = top3_cache[top3_index]
    top3_index += 1

    text = (
        f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: {coin_data['name'].upper()}*\n"
        f"üîÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{coin_data['growth_probability']}%*\n"
        f"üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {coin_data['price']} USD\n"
        f"üéØ –¶–µ–ª—å: {coin_data['target_price']} USD (+5%)\n"
        f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {coin_data['stop_loss']} USD (-3%)"
    )

    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin_data['name']}"))

    await message.answer(escape_markdown(text), reply_markup=inline_kb)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ 8:00 –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–µ —á–µ—Ä–µ–∑ message)
async def handle_scheduled_signal():
    global top3_cache, top3_index
    logger.info("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)")
    if not top3_cache or top3_index >= len(top3_cache):
        top3_cache = await analyze_cryptos()
        top3_index = 0

    if not top3_cache:
        await bot.send_message(USER_ID, "‚ùå –¢–æ–ø-3 –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    coin_data = top3_cache[top3_index]
    top3_index += 1

    text = (
        f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: {coin_data['name'].upper()}*\n"
        f"üîÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{coin_data['growth_probability']}%*\n"
        f"üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {coin_data['price']} USD\n"
        f"üéØ –¶–µ–ª—å: {coin_data['target_price']} USD (+5%)\n"
        f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {coin_data['stop_loss']} USD (-3%)"
    )

    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin_data['name']}"))

    await bot.send_message(USER_ID, escape_markdown(text), reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track:"))
async def process_tracking_callback(callback_query: types.CallbackQuery):
    coin_name = callback_query.data.split(":")[1]
    CoinTracker.track_coin(coin_name, USER_ID)
    await bot.answer_callback_query(callback_query.id, text=f"–ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_name.upper()}")
    await bot.send_message(USER_ID, f"üîî –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞ {coin_name.upper()} (+3.5%, +5%, 12—á)")

# –ö–Ω–æ–ø–∫–∞: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_stop_tracking(message: types.Message):
    CoinTracker.clear_all()
    await message.answer("üîï –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler.add_job(
    handle_scheduled_signal,
    CronTrigger(hour=8, minute=0),
    id="daily_signal"
)

tracking_manager = CoinTrackingManager()
scheduler.add_job(tracking_manager.run, IntervalTrigger(minutes=10))

scheduler.start()

if __name__ == '__main__':
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
