import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio

from config import BOT_TOKEN, USER_ID
from signal_generator import generate_signal
from tracker import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

tracker = CoinTracker(bot, USER_ID)

main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add("üü¢ –°—Ç–∞—Ä—Ç", "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
main_keyboard.add("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

def get_watch_button(symbol):
    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"watch_{symbol}"))
    return inline_kb

@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    await message.answer(
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.",
        reply_markup=main_keyboard
    )

@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def manual_signal_handler(message: types.Message):
    result = await generate_signal()
    if result:
        text = (
            f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
            f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result['current_price']:.4f} USDT\n"
            f"üéØ –¶–µ–ª—å: +5% ‚Üí {result['target_price']:.4f} USDT\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_loss_price']:.4f} USDT\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*\n"
            f"üìà RSI: {result['rsi']}, MA: {result['ma']}, 24h: {result['change_24h']}%\n"
        )
        await message.answer(text, reply_markup=get_watch_button(result['symbol']))
    else:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")

@dp.message_handler(lambda message: message.text == "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_all_handler(message: types.Message):
    tracker.stop_all()
    await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.callback_query_handler(lambda c: c.data.startswith("watch_"))
async def watch_handler(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split("_", 1)[1]
    tracker.track_coin(symbol)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"üîî –¢–µ–ø–µ—Ä—å —Å–ª–µ–∂—É –∑–∞ –º–æ–Ω–µ—Ç–æ–π {symbol}. –£–≤–µ–¥–æ–º–ª—é –ø—Ä–∏ +3.5% –∏–ª–∏ +5%.")

async def send_daily_signal():
    result = await generate_signal()
    if result:
        text = (
            f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*\n\n"
            f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result['current_price']:.4f} USDT\n"
            f"üéØ –¶–µ–ª—å: +5% ‚Üí {result['target_price']:.4f} USDT\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_loss_price']:.4f} USDT\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*\n"
            f"üìà RSI: {result['rsi']}, MA: {result['ma']}, 24h: {result['change_24h']}%\n"
        )
        await bot.send_message(USER_ID, text, reply_markup=get_watch_button(result['symbol']))
    else:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")

async def on_startup(_):
    scheduler.add_job(send_daily_signal, 'cron', hour=8, minute=0)
    scheduler.start()
    logger.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
