# main.py ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞

import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import TELEGRAM_TOKEN, OWNER_ID
from analysis import get_top_3_cryptos
from tracking import CoinTracker, CoinTrackingManager

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
tracking_manager = CoinTrackingManager()

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["\U0001F4CA –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", "\U0001F6D1 –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"]
    keyboard.add(*buttons)

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n"
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞.",
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "\U0001F4CA –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def get_signal(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return

    logging.info("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    top_cryptos = get_top_3_cryptos()
    logging.info(f"üîç top_cryptos: {top_cryptos}")

    if not top_cryptos:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    for crypto in top_cryptos:
        signal = {
            "symbol": crypto["symbol"],
            "price": crypto["price"],
            "probability": crypto["probability"],
        }
        entry = signal["price"]
        target = entry * 1.05
        stop_loss = entry * 0.97

        msg = (
            f"\U0001F4C8 *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {signal.get('symbol', '-')}\n"
            f"\U0001F3AF *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {signal.get('probability', 0)}%\n"
            f"\U0001F4B0 *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {entry:.4f} USD\n"
            f"\U0001F3AF *–¶–µ–ª—å:* {target:.4f} USD (+5%)\n"
            f"\U0001F6E1 *–°—Ç–æ–ø-–ª–æ—Å—Å:* {stop_loss:.4f} USD (-3%)"
        )
        await message.answer(msg)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        coin_data = {"symbol": crypto["symbol"], "id": crypto["symbol"].lower()}
        tracker = CoinTracker(bot, coin_data, entry)
        tracking_manager.add_tracker(tracker)

@dp.message_handler(lambda message: message.text == "\U0001F6D1 –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return

    tracking_manager.trackers.clear()
    await message.answer("\U0001F6D1 –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
async def daily_signal():
    try:
        top_cryptos = get_top_3_cryptos()
        if not top_cryptos:
            return

        crypto = top_cryptos[0]
        entry = crypto["price"]
        target = entry * 1.05
        stop_loss = entry * 0.97

        msg = (
            f"\U0001F4C8 *–°–∏–≥–Ω–∞–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:* {crypto['symbol']}\n"
            f"\U0001F3AF *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:* {crypto['probability']}%\n"
            f"\U0001F4B0 *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {entry:.4f} USD\n"
            f"\U0001F3AF *–¶–µ–ª—å:* {target:.4f} USD (+5%)\n"
            f"\U0001F6E1 *–°—Ç–æ–ø-–ª–æ—Å—Å:* {stop_loss:.4f} USD"
        )
        await bot.send_message(OWNER_ID, msg)

        coin_data = {"symbol": crypto["symbol"], "id": crypto["symbol"].lower()}
        tracker = CoinTracker(bot, coin_data, entry)
        tracking_manager.add_tracker(tracker)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    scheduler.add_job(daily_signal, "cron", hour=8, minute=0)
    scheduler.add_job(tracking_manager.run, "interval", minutes=10)
    scheduler.start()
    logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
