import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from config import BOT_TOKEN, USER_ID
from signal_generator import generate_signal
from coin_tracker import CoinTracker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
tracker = CoinTracker(bot)

# –ö–Ω–æ–ø–∫–∏
keyboard = InlineKeyboardMarkup(row_width=2)
keyboard.add(
    InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
    InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
    InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_all")
)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    logger.info("\U0001F7E2 –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("\u2705 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'start')
async def process_start(callback_query: types.CallbackQuery):
    logger.info("\u2705 –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç")
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "\u2705 –ë–æ—Ç –≥–æ—Ç–æ–≤. –ñ–º–∏ \"\ud83d\ude80 –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª\" –∏–ª–∏ \"\ud83d\udd34 –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\".", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'get_signal')
async def process_get_signal(callback_query: types.CallbackQuery):
    logger.info("\u23F0 –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞...")
    await bot.answer_callback_query(callback_query.id)
    result = generate_signal()

    if not result:
        await bot.send_message(callback_query.from_user.id, "\u26A0\ufe0f –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ —Ä—ã–Ω–æ–∫ –∂–∏–≤—ë—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    text = (
        f"\ud83d\udca1 *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']} ({result['symbol']})*

"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{result['entry']} $
"
        f"–¶–µ–ª—å: +5% ‚Üí {result['target']} $
"
        f"Stop-loss: {result['stop']} $
"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*
"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {result['change_24h']:.2f}%
"
        f"RSI: {result['rsi']:.2f}
"
        f"MA(7): {result['ma7']:.4f}, MA(20): {result['ma20']:.4f}"
    )

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
    follow_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("\ud83d\udc41 –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"follow_{result['symbol']}")
    )

    await bot.send_message(callback_query.from_user.id, text, reply_markup=follow_keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('follow_'))
async def process_follow(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split('_', 1)[1]
    logger.info(f"\U0001F441 –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {symbol}")
    await bot.answer_callback_query(callback_query.id)
    await tracker.track_coin(symbol, callback_query.from_user.id)

@dp.callback_query_handler(lambda c: c.data == 'stop_all')
async def process_stop(callback_query: types.CallbackQuery):
    logger.info("\u274C –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")
    await bot.answer_callback_query(callback_query.id)
    await tracker.stop_all(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "\u274c –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def send_daily_signal():
    logger.info("\ud83d\udd52 –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    result = generate_signal()
    if not result:
        await bot.send_message(USER_ID, "\u26A0\ufe0f –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≤—Ç—Ä–∞.")
        return

    text = (
        f"\ud83d\udca1 *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']} ({result['symbol']})*

"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{result['entry']} $
"
        f"–¶–µ–ª—å: +5% ‚Üí {result['target']} $
"
        f"Stop-loss: {result['stop']} $
"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*
"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {result['change_24h']:.2f}%
"
        f"RSI: {result['rsi']:.2f}
"
        f"MA(7): {result['ma7']:.4f}, MA(20): {result['ma20']:.4f}"
    )

    follow_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("\ud83d\udc41 –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"follow_{result['symbol']}")
    )

    await bot.send_message(USER_ID, text, reply_markup=follow_keyboard)

async def on_startup(dp):
    scheduler.add_job(send_daily_signal, 'cron', hour=8, minute=0)
    scheduler.start()
    logger.info("\u23f3 –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")
    await asyncio.sleep(1)
    print("\u2705 –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
