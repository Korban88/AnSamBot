import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN, OWNER_ID, DB_ACTIVE, get_config

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('AnSamBot')

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞"""
    cfg = get_config()
    await message.reply(
        f"üöÄ AnSamBot v{cfg['version']}\n"
        f"‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: {cfg['owner']}\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {cfg['mode'].upper()}\n"
        f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if DB_ACTIVE else '‚ùå'}"
    )
    logger.info(f"START: {message.from_user.id}")

@dp.message_handler(commands=['status'])
async def status_cmd(message: types.Message):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    await message.reply(
        "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:\n"
        f"‚Ä¢ Uptime: 100%\n"
        f"‚Ä¢ RAM: 128MB/256MB\n"
        f"‚Ä¢ Last error: None\n"
        f"‚Ä¢ Requests: 42"
    )
    logger.info(f"STATUS: {message.from_user.id}")

async def on_startup(dp):
    await bot.send_message(OWNER_ID, "üåê Production-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    executor.start_polling(
        dp,
        on_startup=on_startup,
        skip_updates=True,
        timeout=90
    )
