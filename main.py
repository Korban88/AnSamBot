import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import get_top_ton_wallet_coins  # –£–¥–∞–ª–∏–ª–∏ track_price_changes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c'
USER_ID = 347552741
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
tracked_coin = None
tracked_price = None
tracking_start_time = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def start_command(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=keyboard)

@dp.message_handler(commands=['test'])
@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def send_signal(message: types.Message):
    try:
        result = get_top_ton_wallet_coins()
        if result:
            signal_text = format_signal(result)
            await message.answer(signal_text)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç: {e}")

@dp.message_handler(lambda message: message.text == "üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π")
async def follow_coin(message: types.Message):
    global tracked_coin, tracked_price, tracking_start_time
    try:
        result = get_top_ton_wallet_coins()
        if result:
            tracked_coin = result['name']
            tracked_price = result['price']
            tracking_start_time = asyncio.get_event_loop().time()
            await message.answer(f"üîî –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {tracked_coin} –ø–æ —Ü–µ–Ω–µ ${tracked_price:.4f}")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")

async def scheduled_signal():
    try:
        result = get_top_ton_wallet_coins()
        if result:
            signal_text = format_signal(result)
            await bot.send_message(USER_ID, signal_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_signal: {e}")

async def track_coin_changes():
    global tracked_coin, tracked_price, tracking_start_time
    if not tracked_coin or not tracked_price:
        return

    try:
        result = get_top_ton_wallet_coins()
        if result and result['name'] == tracked_coin:
            current_price = result['price']
            change_percent = ((current_price - tracked_price) / tracked_price) * 100
            elapsed = asyncio.get_event_loop().time() - tracking_start_time

            if change_percent >= 5:
                await bot.send_message(USER_ID, f"üìà {tracked_coin} –≤—ã—Ä–æ—Å –Ω–∞ +5%! –¶–µ–Ω–∞: ${current_price:.4f}")
                tracked_coin = None  # —Å–±—Ä–æ—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            elif change_percent >= 3.5:
                await bot.send_message(USER_ID, f"üìà {tracked_coin} –≤—ã—Ä–æ—Å –Ω–∞ +3.5%. –¶–µ–Ω–∞: ${current_price:.4f}")
            elif elapsed >= 43200:
                await bot.send_message(USER_ID, f"‚è≥ {tracked_coin} –Ω–µ –≤—ã—Ä–æ—Å –Ω–∞ 3.5% –∑–∞ 12 —á–∞—Å–æ–≤.")
                tracked_coin = None

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã: {e}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞

def format_signal(data):
    name = data['name']
    price = data['price']
    change_24h = data.get('change_24h', 0)
    change_7d = data.get('change_7d', 0)
    volume = data.get('volume', 0)
    target = price * 1.05
    stop = price * 0.95
    return (
        f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã:\n"
        f"–ú–æ–Ω–µ—Ç–∞: {name}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.4f}\n"
        f"–¶–µ–ª—å +5%: ${target:.4f}\n"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: ${stop:.4f}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change_24h:.2f}%\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {change_7d:.2f}%\n"
        f"–û–±—ä—ë–º: ${volume}"
    )

async def scheduler_loop():
    scheduler.add_job(scheduled_signal, 'cron', hour=8, minute=0)
    scheduler.add_job(track_coin_changes, 'interval', minutes=10)
    scheduler.start()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler_loop())
    executor.start_polling(dp, skip_updates=True)
