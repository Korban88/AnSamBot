import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time, timedelta
from keep_alive import keep_alive
from signals import get_crypto_signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def more_signal_handler(message: types.Message):
    signal = get_crypto_signal()
    text = f"üíπ –°–∏–≥–Ω–∞–ª: {signal['action']} {signal['coin']} ‚Äî —Ü–µ–ª—å: +{signal['target_profit_percent']}%"
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
async def error_handler(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ê—Ä—Ç—É—Ä—É –ö–æ—Ä–±–∞–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_daily_signal():
    if CHAT_ID:
        signal = get_crypto_signal()
        text = f"üìà –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal['action']} {signal['coin']} ‚Äî —Ü–µ–ª—å: +{signal['target_profit_percent']}%"
        await bot.send_message(CHAT_ID, text)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
moscow_time = time(hour=8, minute=0)
now = datetime.now()
first_run = datetime.combine(now.date(), moscow_time)
if now > first_run:
    first_run += timedelta(days=1)

scheduler.add_job(send_daily_signal, "interval", days=1, start_date=first_run)
scheduler.start()

# –°—Ç–∞—Ä—Ç—É–µ–º
if __name__ == "__main__":
    keep_alive()
    from aiogram import executor
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
