import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import CantParseEntities
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

from config import TELEGRAM_TOKEN, OWNER_ID
from analysis import get_top_cryptos
from tracking import CoinTrackingManager
from crypto_utils import get_current_price

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

coin_tracking_manager = CoinTrackingManager()
top_coins_cache = []
last_signal_index = 0


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
        InlineKeyboardButton("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\!\n\n*AnSam Bot* –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data == "get_signal")
async def get_signal(callback_query: types.CallbackQuery):
    global last_signal_index, top_coins_cache

    await bot.answer_callback_query(callback_query.id)

    if not top_coins_cache:
        top_coins_cache = get_top_cryptos()
        last_signal_index = 0

    if last_signal_index >= len(top_coins_cache):
        await bot.send_message(callback_query.from_user.id, "‚úÖ –°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    signal = top_coins_cache[last_signal_index]
    last_signal_index += 1

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['id']}")
    )

    try:
        await bot.send_message(
            callback_query.from_user.id,
            f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {signal.get('symbol', '-')}\n"
            f"üéØ –¶–µ–ª—å: +5\\%\n"
            f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.get('entry_price', '-')}\n"
            f"üìâ –°—Ç–æ–ø\\-–ª–æ—Å—Å: ${signal.get('stop_loss', '-')}\n"
            f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal.get('growth_probability', '-')}\\%*\n",
            reply_markup=keyboard
        )
    except CantParseEntities as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.")


@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_coin(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    coin_id = callback_query.data.split("_", 1)[1]
    coin = next((c for c in top_coins_cache if c["id"] == coin_id), None)

    if not coin:
        await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    current_price = get_current_price(coin["id"])
    if current_price is None:
        await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã.")
        return

    from tracking import CoinTracker
    tracker = CoinTracker(bot, coin, current_price)
    coin_tracking_manager.add_tracker(tracker)

    await bot.send_message(callback_query.from_user.id, f"üëÅ –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã {coin['symbol'].upper()}.")


@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_all_tracking(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    coin_tracking_manager.stop_all()
    await bot.send_message(callback_query.from_user.id, "‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def daily_signal():
    global top_coins_cache, last_signal_index
    top_coins_cache = get_top_cryptos()
    last_signal_index = 0

    if not top_coins_cache:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")
        return

    signal = top_coins_cache[0]
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track_{signal['id']}")
    )

    try:
        await bot.send_message(
            OWNER_ID,
            f"üìà *–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal['symbol'].upper()}*\n"
            f"üéØ –¶–µ–ª—å: +5\\%\n"
            f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal['entry_price']}\n"
            f"üìâ –°—Ç–æ–ø\\-–ª–æ—Å—Å: ${signal['stop_loss']}\n"
            f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{signal['growth_probability']}\\%*",
            reply_markup=keyboard
        )
    except CantParseEntities as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}")
        await bot.send_message(OWNER_ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.")


scheduler.add_job(daily_signal, "cron", hour=8, minute=0)
scheduler.start()

if __name__ == "__main__":
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
