import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keep_alive import keep_alive
from utils import get_crypto_signal

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is missing. Please set it in Railway Variables.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
async def send_daily_signal():
    signal = await get_crypto_signal()
    await bot.send_message(chat_id=OWNER_ID, text=f"üìà –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª:\n\n{signal}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.reply("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã.")

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"
@dp.message_handler(lambda message: message.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def more_signal_handler(message: types.Message):
    signal = await get_crypto_signal()
    await message.answer(f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n\n{signal}")

async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    scheduler.add_job(send_daily_signal, trigger='cron', hour=8, minute=0)
    scheduler.start()

if __name__ == '__main__':
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Railway –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
