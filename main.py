import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from crypto_utils import get_top_coins
from tracking import CoinTracker
from scheduler import schedule_daily_signal
from keep_alive import keep_alive

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

tracker = None
signal_index = 0
cached_signals = []

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

def esc(text):
    return str(text).replace('\\', '\\\\') \
        .replace('.', '\\.') \
        .replace('-', '\\-') \
        .replace('(', '\\(').replace(')', '\\)') \
        .replace('+', '\\+').replace('%', '\\%') \
        .replace('$', '\\$').replace('_', '\\_') \
        .replace('!', '\\!').replace(':', '\\:')

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)

@dp.message_handler(Text(equals="üü¢ –°—Ç–∞—Ä—Ç"))
async def activate_bot(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8\\:00 –ú–°–ö\\.")

@dp.message_handler(Text(equals="üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
async def send_signals(message: types.Message):
    global signal_index, cached_signals
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª'")
    await message.answer("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞...")

    try:
        if not cached_signals:
            cached_signals = get_top_coins()
            signal_index = 0

        if not cached_signals:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.")
            return

        if signal_index >= len(cached_signals):
            await message.answer("–°–∏–≥–Ω–∞–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üü¢ –°—Ç–∞—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\\.")
            return

        coin = cached_signals[signal_index]
        signal_index += 1

        name = coin['id']
        price = coin['price']
        change = coin['change_24h']
        probability = coin['probability']
        target_price = coin['target_price']
        stop_loss_price = coin['stop_loss_price']
        risky = coin.get('risky', False)

        ma7 = coin["analysis"].get("ma7")
        ma20 = coin["analysis"].get("ma20")
        rsi_val = coin["analysis"].get("rsi")

        risk_note = "\n‚ö†Ô∏è *–ú–æ–Ω–µ—Ç–∞ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!*" if risky else ""

        text = (
            f"*üí∞ –°–∏–≥–Ω–∞–ª:*\n"
            f"–ú–æ–Ω–µ—Ç–∞: *{esc(name)}*\n"
            f"–¶–µ–Ω–∞: *{esc(price)} \\$*\n"
            f"–†–æ—Å—Ç –∑–∞ 24—á: *{esc(change)}\\%*\n"
            f"RSI: *{esc(rsi_val)}*\n"
            f"MA7: *{esc(ma7)}*, MA20: *{esc(ma20)}*\n"
            f"{'üü¢' if probability >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{esc(probability)}\\%*\n"
            f"üéØ –¶–µ–ª—å: *{esc(target_price)} \\$* \\(\\+5\\%\\)\n"
            f"‚õîÔ∏è –°—Ç–æ–ø\\-–ª–æ—Å—Å: *{esc(stop_loss_price)} \\$* \\(\\-3\\.5\\%\\)"
            f"{risk_note}"
        )

        inline_btn = InlineKeyboardMarkup()
        inline_btn.add(InlineKeyboardButton(f"üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ {name}", callback_data=f"track_{name}"))

        await message.answer(text, reply_markup=inline_btn)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        safe_err = esc(str(e))
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {safe_err}")

@dp.callback_query_handler(lambda c: c.data.startswith("track_"))
async def track_selected_coin(callback_query: types.CallbackQuery):
    global tracker
    coin_id = callback_query.data.replace("track_", "")
    logging.info(f"‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω callback: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {coin_id}")

    from pycoingecko import CoinGeckoAPI
    cg = CoinGeckoAPI()
    try:
        price_data = cg.get_price(ids=coin_id, vs_currencies='usd')
        entry_price = float(price_data[coin_id]["usd"])

        tracker = CoinTracker(bot, callback_query.from_user.id)
        tracker.start_tracking(coin_id, entry_price)

        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.from_user.id,
            f"üëÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ *{esc(coin_id)}* –Ω–∞—á–∞—Ç–æ\\.\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{entry_price} \\$*",
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        safe_error = esc(str(e))
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {safe_error}")

@dp.message_handler(Text(equals="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
async def stop_tracking(message: types.Message):
    global tracker
    if tracker:
        tracker.stop_all_tracking()
        await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å.")

async def on_startup(dispatcher):
    schedule_daily_signal(dispatcher, bot, get_top_coins, user_id=USER_ID)
    keep_alive()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
