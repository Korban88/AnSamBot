import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from signal_generator import generate_signal
from coin_tracker import CoinTracker
from config import BOT_TOKEN, USER_ID
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

tracker = CoinTracker(bot, USER_ID)

top3_cache = []
top3_index = 0

def format_signal(result):
    explanation = (
        f"*üí° –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']} ({result['symbol']})*
"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: *{result['entry']}*
"
        f"üéØ –¶–µ–ª—å (+5%): *{result['target']}*
"
        f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å (‚àí3.5%): *{result['stop']}*

"
        f"*üìä –ú–µ—Ç—Ä–∏–∫–∏:*
"
        f"‚Äî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {result['change_24h']}%
"
        f"‚Äî RSI: {result['rsi']}
"
        f"‚Äî MA7: {result['ma7']}
"
        f"‚Äî MA20: {result['ma20']}
"
        f"‚Äî –û—Ü–µ–Ω–∫–∞: {result['score']} / –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{result['probability']}%*"
    )
    return explanation

def get_signal_keyboard(symbol):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{symbol}"))
    return keyboard

@dp.message_handler(lambda message: message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_handler(message: types.Message):
    await message.answer("‚úÖ –Ø –≥–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ñ–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª¬ª.")

@dp.message_handler(lambda message: message.text.lower() == "üöÄ –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def manual_signal_handler(message: types.Message):
    global top3_cache, top3_index

    await message.answer("–¢—ã –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏–≥–Ω–∞–ª")

    if not top3_cache or top3_index >= len(top3_cache):
        top3_cache = generate_signal(return_top3=True)
        top3_index = 0

    if not top3_cache:
        await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç. –ù–æ —Ä—ã–Ω–æ–∫ –∂–∏–≤—ë—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    result = top3_cache[top3_index]
    top3_index += 1

    msg = format_signal(result)
    keyboard = get_signal_keyboard(result["symbol"])
    await message.answer(msg, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("track:"))
async def track_callback(callback_query: types.CallbackQuery):
    symbol = callback_query.data.split(":")[1]
    await callback_query.answer("üîç –ú–æ–Ω–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    await tracker.add(symbol)

@dp.message_handler(lambda message: message.text.lower() == "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    await tracker.clear()
    await message.answer("üõë –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def send_daily_signal():
    logger.info("‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    result = generate_signal()
    if result:
        msg = format_signal(result)
        keyboard = get_signal_keyboard(result["symbol"])
        await bot.send_message(USER_ID, msg, reply_markup=keyboard)
    else:
        await bot.send_message(USER_ID, "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—é –ø–æ–∑–∂–µ.")

async def on_startup(dp):
    scheduler.add_job(send_daily_signal, "cron", hour=8, minute=0)
    scheduler.add_job(tracker.run, "interval", minutes=10)
    scheduler.start()
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)