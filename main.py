import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_list import crypto_list
from analysis import get_top_signals
from tracking import CoinTracker
import asyncio
import os
import re

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
OWNER_ID = 347552741

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ø-3
top_signals_cache = []
current_signal_index = 0

# –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = CoinTracker(bot, OWNER_ID)

# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
def escape_markdown(text):
    escape_chars = r"_\*\[\]\(\)~`>#+\-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\\\1", text)

def get_signal_message(signal):
    name = escape_markdown(signal['name'])
    price = signal['price']
    target = signal['target_price']
    stop = signal['stop_loss']
    prob = signal['probability']
    reason = escape_markdown(signal['reason'])

    return (
        f"*–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç:* `{name}`\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{price}*\n"
        f"–¶–µ–ª—å: *{target}*  (+5\%)\n"
        f"–°—Ç–æ–ø\-–ª–æ—Å—Å: *{stop}*\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{prob}\%*\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )

def get_signal_keyboard(coin_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üîç –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{coin_name}")]
    ])

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("\U0001F680 –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
    keyboard.add("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def stop_tracking(message: types.Message):
    await tracker.stop_all_tracking()
    await message.answer("–í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message_handler(lambda m: m.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def more_signal(message: types.Message):
    global current_signal_index
    global top_signals_cache

    if not top_signals_cache:
        top_signals_cache = await get_top_signals(crypto_list)
        current_signal_index = 0

    if not top_signals_cache:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if current_signal_index >= len(top_signals_cache):
        current_signal_index = 0

    signal = top_signals_cache[current_signal_index]
    current_signal_index += 1

    await bot.send_message(
        message.chat.id,
        get_signal_message(signal),
        reply_markup=get_signal_keyboard(signal['name'])
    )

@dp.callback_query_handler(lambda c: c.data.startswith('track:'))
async def track_coin(callback_query: types.CallbackQuery):
    coin = callback_query.data.split(':')[1]
    await tracker.track_coin(coin)
    await bot.answer_callback_query(callback_query.id, text=f"–û—Ç—Å–ª–µ–∂–∏–≤–∞—é {coin} –Ω–∞ +3.5\% –∏ +5\%")

async def daily_signal():
    top = await get_top_signals(crypto_list)
    if top:
        signal = top[0]
        await bot.send_message(
            OWNER_ID,
            get_signal_message(signal),
            reply_markup=get_signal_keyboard(signal['name'])
        )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
scheduler.add_job(daily_signal, 'cron', hour=8, minute=0)
scheduler.add_job(tracker.run, 'interval', minutes=10)
scheduler.start()

if __name__ == '__main__':
    logger.info("\u2705 –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
