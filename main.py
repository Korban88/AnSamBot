import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from crypto_utils import get_top_ton_wallet_coins, track_price_changes

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

watchlist = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))

# –°—Ç–∞—Ä—Ç
@dp.message_handler(lambda message: message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=keyboard)

# –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª
async def send_signal():
    try:
        result = get_top_ton_wallet_coins()
        if result is None:
            await bot.send_message(USER_ID, "‚ö†Ô∏è –ú–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        text = (
            "üìà –°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç –º–æ–Ω–µ—Ç—ã:\n\n"
            f"–ú–æ–Ω–µ—Ç–∞: {result['id'].upper()}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${result['price']}\n"
            f"–¶–µ–ª—å +5%: ${round(result['price'] * 1.05, 4)}\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: ${round(result['price'] * 0.955, 4)}\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {result['change_24h']}%\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7–¥: {result['change_7d']}%\n"
            f"–û–±—ä—ë–º: ${result['volume']:,}"
        )
        await bot.send_message(USER_ID, text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_signal(): {e}")
        await bot.send_message(USER_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç:\n{e}")

# –ö–æ–º–∞–Ω–¥–∞ /test
@dp.message_handler(commands=['test'])
async def test(message: types.Message):
    await message.answer("‚úèÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:")
    await send_signal()

# –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª¬ª
@dp.message_handler(lambda message: message.text.lower().startswith("üöÄ"))
async def more_signal(message: types.Message):
    await send_signal()

# –ö–Ω–æ–ø–∫–∞ ¬´–°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π¬ª
@dp.message_handler(lambda message: message.text.lower().startswith("üîî"))
async def watch_coin(message: types.Message):
    result = get_top_ton_wallet_coins()
    if result:
        coin = result['id']
        price = result['price']
        watchlist[coin] = {
            'start_price': price,
            'start_time': asyncio.get_event_loop().time(),
            'notified_3_5': False,
            'notified_5': False,
            'notified_timeout': False
        }
        await message.answer(f"‚è± –ú–æ–Ω–µ—Ç–∞ {coin.upper()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
async def track_all():
    for coin, data in watchlist.items():
        try:
            await track_price_changes(bot, USER_ID, coin, data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ {coin}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async def scheduled_signal():
    await send_signal()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    scheduler.add_job(scheduled_signal, 'cron', hour=8, minute=0)
    scheduler.add_job(track_all, 'interval', minutes=10)
    scheduler.start()

    executor.start_polling(dp, skip_updates=True)
