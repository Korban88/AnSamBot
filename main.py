import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import TELEGRAM_TOKEN, TELEGRAM_ID
from analysis import get_top_signals
from tracking import CoinTracker

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤–Ω–∏–∑—É)
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"), KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
main_keyboard.add(KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
def get_inline_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üîç –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data="track"),
        InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="more"),
        InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking"),
    )
    return keyboard

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω\\!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\\.",
        reply_markup=main_keyboard
    )

@dp.message_handler(lambda message: message.text == "üü¢ –°—Ç–∞—Ä—Ç")
async def handle_start(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª")
async def handle_more(message: types.Message):
    await send_signal(message.chat.id)

@dp.message_handler(lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_stop_tracking(message: types.Message):
    CoinTracker.stop_all()
    await message.answer("‚ùå –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_keyboard)

@dp.callback_query_handler(lambda c: c.data == "more")
async def more_signal(callback_query: types.CallbackQuery):
    await send_signal(callback_query.from_user.id)

@dp.callback_query_handler(lambda c: c.data == "track")
async def track_signal(callback_query: types.CallbackQuery):
    CoinTracker.track_current()
    await callback_query.answer("üì° –ú–æ–Ω–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")

@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_signal(callback_query: types.CallbackQuery):
    CoinTracker.stop_all()
    await callback_query.answer("üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def send_signal(chat_id):
    signal = get_top_signals(1)[0]

    symbol = signal.get("symbol", "‚Äî")
    price = signal.get("price", 0)
    target = signal.get("target", 0)
    stop_loss = signal.get("stop_loss", 0)
    probability = signal.get("probability", 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if price == 0 or symbol == "‚Äî":
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã.")
        return

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º MarkdownV2
    def esc(text):
        return str(text).replace("-", "\\-").replace(".", "\\.").replace("!", "\\!").replace("(", "\\(").replace(")", "\\)").replace("+", "\\+")

    text = (
        f"üìà *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ:* {esc(symbol)}\n\n"
        f"üíé –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \\${esc(price)}\n"
        f"üéØ –¶–µ–ª—å \\(\\+5%\\): \\${esc(target)}\n"
        f"üõë –°—Ç–æ–ø\\-–ª–æ—Å—Å \\(\\-3%\\): \\${esc(stop_loss)}\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{esc(probability)}%*"
    )

    await bot.send_message(chat_id, text, reply_markup=get_inline_keyboard())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

def daily_signal():
    asyncio.create_task(send_signal(TELEGRAM_ID))

scheduler.add_job(daily_signal, "cron", hour=8, minute=0)
scheduler.add_job(CoinTracker.run, "interval", minutes=10)
scheduler.start()

if __name__ == "__main__":
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
