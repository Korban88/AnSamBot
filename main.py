import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from tracker import CoinTracker
from signal_generator import generate_signal
from config import BOT_TOKEN, USER_ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å)
main_keyboard = InlineKeyboardMarkup(row_width=2)
main_keyboard.add(
    InlineKeyboardButton("üü¢ –°—Ç–∞—Ä—Ç", callback_data="start"),
    InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
    InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="stop_tracking")
)

# –û–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–µ—Ä–∞
tracker = CoinTracker(bot, USER_ID)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.", reply_markup=main_keyboard)

@dp.callback_query_handler(lambda c: c.data == "start")
async def process_start(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "get_signal")
async def process_get_signal(callback_query: types.CallbackQuery):
    result = await generate_signal()
    if result is None:
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        await callback_query.answer()
        return

    text = (
        f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*
"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {result['entry_price']}
"
        f"–¶–µ–ª—å (5%): {result['target_price']}
"
        f"–°—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_loss']}
"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['probability']}%
"
        f"Œî24—á: {result['change_24h']}% | RSI: {result['rsi']} | MA: {result['ma_trend']}"
    )

    follow_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['name']}:{result['entry_price']}")
    )
    await callback_query.message.answer(text, reply_markup=follow_button)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("track:"))
async def handle_track_coin(callback_query: types.CallbackQuery):
    parts = callback_query.data.split(":")
    if len(parts) != 3:
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        return
    coin, entry = parts[1], float(parts[2])
    await tracker.track_coin(coin, entry)
    await callback_query.answer(f"–ú–æ–Ω–µ—Ç–∞ {coin} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

@dp.callback_query_handler(lambda c: c.data == "stop_tracking")
async def stop_all_tracking(callback_query: types.CallbackQuery):
    await tracker.stop_all_tracking()
    await callback_query.answer("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def send_daily_signal():
    result = await generate_signal()
    if result:
        text = (
            f"üí° *–°–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ—Å—Ç: {result['name']}*
"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {result['entry_price']}
"
            f"–¶–µ–ª—å (5%): {result['target_price']}
"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_loss']}
"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['probability']}%
"
            f"Œî24—á: {result['change_24h']}% | RSI: {result['rsi']} | MA: {result['ma_trend']}"
        )
        follow_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π", callback_data=f"track:{result['name']}:{result['entry_price']}")
        )
        await bot.send_message(USER_ID, text, reply_markup=follow_button)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ú–°–ö
scheduler.add_job(send_daily_signal, "cron", hour=8, minute=0)
scheduler.start()

if __name__ == "__main__":
    logging.info("‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: 1167.0 –º–∏–Ω—É—Ç")
    executor.start_polling(dp, skip_updates=True)
