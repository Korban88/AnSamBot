import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from crypto_utils import get_top_coins
from tracking import CoinTracker
from scheduler import schedule_daily_signal

BOT_TOKEN = "8148906065:AAEw8yAPKnhjw3AK2tsYEo-h9LVj74xJS4c"
USER_ID = 347552741

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

tracker = None

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç"))
keyboard.add(KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
keyboard.add(KeyboardButton("üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))
keyboard.add(KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))

def esc_md(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, '\\' + ch)
    return text

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –ö–æ—Ä–±–∞–Ω!", reply_markup=keyboard)

@dp.message_handler(Text(equals="üü¢ –°—Ç–∞—Ä—Ç"))
async def activate_bot(message: types.Message):
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8\\:00 –ú–°–ö\\.")

@dp.message_handler(Text(equals="üöÄ –ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª"))
async def send_signals(message: types.Message):
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë —Å–∏–≥–Ω–∞–ª'")
    try:
        await message.answer("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞...")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        coins = get_top_coins()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {len(coins)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_top_coins(): {e}")
        try:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        except Exception as ex:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ get_top_coins: {ex}")
        return

    if not coins:
        logging.warning("–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø—É—Å—Ç, —Å–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        try:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –º–æ–Ω–µ—Ç: {e}")
        return

    for coin in coins:
        try:
            text_md = (
                f"*üí∞ –°–∏–≥–Ω–∞–ª:*\n"
                f"–ú–æ–Ω–µ—Ç–∞: *{esc_md(str(coin['id']))}*\n"
                f"–¶–µ–Ω–∞: *{esc_md(str(coin['price']))} \\$*\n"
                f"–†–æ—Å—Ç –∑–∞ 24—á: *{esc_md(str(coin['change_24h']))}\\%*\n"
                f"{'üü¢' if float(coin['probability']) >= 70 else 'üî¥'} –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{esc_md(str(coin['probability']))}\\%*\n"
                f"üéØ –¶–µ–ª—å: *{esc_md(str(coin['target_price']))} \\$* \\(\\+5\\%\\)\n"
                f"‚õîÔ∏è –°—Ç–æ–ø\\-–ª–æ—Å—Å: *{esc_md(str(coin['stop_loss_price']))} \\$* \\(\\-3\\.5\\%\\)"
            )
            text_plain = (
                f"–°–∏–≥–Ω–∞–ª:\n"
                f"–ú–æ–Ω–µ—Ç–∞: {coin['id']}\n"
                f"–¶–µ–Ω–∞: {coin['price']} $\n"
                f"–†–æ—Å—Ç –∑–∞ 24—á: {coin['change_24h']}%\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {coin['probability']}%\n"
                f"–¶–µ–ª—å: {coin['target_price']} $\n"
                f"–°—Ç–æ–ø-–ª–æ—Å—Å: {coin['stop_loss_price']} $"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –º–æ–Ω–µ—Ç–µ {coin}: {e}")
            continue

        try:
            await message.answer(text_md, parse_mode="MarkdownV2")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ {coin['id']} —Å MarkdownV2")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ MarkdownV2 –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {coin['id']}: {e}, –ø—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            try:
                await message.answer(text_plain)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ {coin['id']} –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except Exception as ex:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {coin['id']}: {ex}")
                try:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –º–æ–Ω–µ—Ç–µ {coin['id']}")
                except Exception as exc:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ {coin['id']}: {exc}")

@dp.message_handler(Text(equals="üëÅ –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç–æ–π"))
async def track_coin(message: types.Message):
    global tracker
    user_id = message.from_user.id
    coin_id = "toncoin"

    from pycoingecko import CoinGeckoAPI
    cg = CoinGeckoAPI()
    try:
        price_data = cg.get_price(ids=coin_id, vs_currencies='usd')
        entry_price = float(price_data[coin_id]["usd"])

        tracker = CoinTracker(bot, user_id)
        tracker.start_tracking(coin_id, entry_price)
        tracker.run()

        await message.answer(
            f"üëÅ –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ *{esc_md(coin_id)}*\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{esc_md(str(entry_price))} \\$*"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {esc_md(str(e))}")

@dp.message_handler(Text(equals="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"))
async def stop_tracking(message: types.Message):
    global tracker
    if tracker:
        tracker.stop_all_tracking()
        await message.answer("‚õîÔ∏è –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å.")

async def on_startup(dispatcher):
    schedule_daily_signal(dispatcher, bot, get_top_coins, user_id=USER_ID)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
